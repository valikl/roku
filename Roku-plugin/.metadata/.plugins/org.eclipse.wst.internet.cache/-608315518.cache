<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.0.20160418">
    <xs:element name="component">
        <xs:annotation>
            <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/pages/viewpage.action?pageId=1608292"&gt;https://sdkdocs.roku.com/pages/viewpage.action?pageId=1608292&lt;/a&gt;</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence minOccurs="0">
                <xs:element maxOccurs="1" minOccurs="0" name="interface">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/pages/viewpage.action?pageId=1608549"&gt;https://sdkdocs.roku.com/pages/viewpage.action?pageId=1608549&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence minOccurs="0">
                            <xs:element maxOccurs="unbounded" minOccurs="0" name="field">
                                <xs:annotation>
                                    <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;null&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="null"&gt;null&lt;/a&gt;</xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:attribute name="id" use="required">
                                        <xs:annotation>
                                            <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;A string containing the name of the field</xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="type" use="required">
                                        <xs:annotation>
                                            <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;A string containing the type of the field. The allowable types are BrightScript fundamental types, a Scene Graph node object reference, and a URL identifier type, as follows: Type Description integer, int BrightScript integer type float BrightScript float type string, str BrightScript string type Boolean, bool BrightScript Boolean type vector2d X/Y coordinate array color Color type time Time type uri A URL identifier node Scene Graph node object reference floatarray Array of float intarray Array of integer boolarray Array of Boolean stringarray Array of string vector2darray Array of vector2d colorarray Array of color timearray Array of time nodearray Array of Scene Graph node object reference assocarray Associative array</xs:documentation>
                                        </xs:annotation>
                                        <xs:simpleType>
                                            <xs:restriction base="xs:string">
                                                <xs:enumeration value="integer">
                                                    <xs:annotation>
                                                        <xs:documentation>BrightScript integer type</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="int">
                                                    <xs:annotation>
                                                        <xs:documentation>BrightScript integer type</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="float">
                                                    <xs:annotation>
                                                        <xs:documentation>BrightScript float type</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="string">
                                                    <xs:annotation>
                                                        <xs:documentation>BrightScript string type</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="str">
                                                    <xs:annotation>
                                                        <xs:documentation>BrightScript string type</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="Boolean">
                                                    <xs:annotation>
                                                        <xs:documentation>BrightScript Boolean type</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="bool">
                                                    <xs:annotation>
                                                        <xs:documentation>BrightScript Boolean type</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="vector2d">
                                                    <xs:annotation>
                                                        <xs:documentation>X/Y coordinate array</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="color">
                                                    <xs:annotation>
                                                        <xs:documentation>Color type</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="time">
                                                    <xs:annotation>
                                                        <xs:documentation>Time type</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="uri">
                                                    <xs:annotation>
                                                        <xs:documentation>A URL identifier</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="node">
                                                    <xs:annotation>
                                                        <xs:documentation>Scene Graph node object reference</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="floatarray">
                                                    <xs:annotation>
                                                        <xs:documentation>Array of float</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="intarray">
                                                    <xs:annotation>
                                                        <xs:documentation>Array of integer</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="boolarray">
                                                    <xs:annotation>
                                                        <xs:documentation>Array of Boolean</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="stringarray">
                                                    <xs:annotation>
                                                        <xs:documentation>Array of string</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="vector2darray">
                                                    <xs:annotation>
                                                        <xs:documentation>Array of vector2d</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="colorarray">
                                                    <xs:annotation>
                                                        <xs:documentation>Array of color</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="timearray">
                                                    <xs:annotation>
                                                        <xs:documentation>Array of time</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="nodearray">
                                                    <xs:annotation>
                                                        <xs:documentation>Array of Scene Graph node object reference</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                                <xs:enumeration value="assocarray">
                                                    <xs:annotation>
                                                        <xs:documentation>Associative array</xs:documentation>
                                                    </xs:annotation>
                                                </xs:enumeration>
                                            </xs:restriction>
                                        </xs:simpleType>
                                    </xs:attribute>
                                    <xs:attribute name="alias">
                                        <xs:annotation>
                                            <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Allows a top-level component field to be declared as an alias of a field in one of the component child nodes. This allows a field of an internal component node to be exposed to users of the component. The attribute is set to a string with format node.field, where node is the ID of a Scene Graph node element, and field is the name of one of the node fields. The type of the component child node field must match the type attribute.</xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="value">
                                        <xs:annotation>
                                            <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;A string representing the initial value of the top-level field. If not specified, the default value for the field type is used (such as, zero for numeric fields, an empty string to string fields, and so forth).</xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="onChange">
                                        <xs:annotation>
                                            <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets an observer call-back function to be added for the top-level field. The value of the attribute is a call-back function name in BrightScript code associated with the component. This attribute is provided as a quick way to set up an observer call-back function for top-level fields. It is equivalent to calling ObserveField() in BrightScript code associated with the component as follows:   m.top.ObserveField(field_name, function_name)</xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                    <xs:attribute name="alwaysNotify">
                                        <xs:annotation>
                                            <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;A string with the value true or false that indicates whether the field observer functions should be notified every time the field value is set, or only when the field value changes. By default, the attribute is false, so the observer functions are only notified when the field value changes. Set this attribute to true if the observer function should be notified every time the field value is set even though it doesn't necessarily change.</xs:documentation>
                                        </xs:annotation>
                                    </xs:attribute>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="script">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/pages/viewpage.action?pageId=1608550"&gt;https://sdkdocs.roku.com/pages/viewpage.action?pageId=1608550&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:attribute fixed="text/brightscript" name="type" use="required">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;A string defining the type of the script. This should be set to "text/brightscript" for BrightScript code.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;A string specifying an external file that contains script code associated with the component. This file must be located in the components directory of the application, and have the .brs extension for BrightScript code.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element maxOccurs="1" minOccurs="0" name="children">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/pages/viewpage.action?pageId=1608551"&gt;https://sdkdocs.roku.com/pages/viewpage.action?pageId=1608551&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="name" use="required">
                <xs:annotation>
                    <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the name of the component. For example, if the name of the component is castmemberinfo, you could create instances of the component declaratively in an XML file node element (&lt;castmemberinfo&gt;), or using BrightScript (createObject("roSGNode","castmemberinfo")). The name attribute is case-sensitive. You cannot successfully create or declare a component unless the component name exactly matches the name attribute, including case.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="extends" use="required">
                <xs:annotation>
                    <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the name of the built-in Scene Graph scene or node class whose functionality is extended by this component. For example, extends = "Group" specifies the component has all of the functionality of the Group node class (it can have child nodes, has translation/scale/rotation fields, and so forth).</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="Node"/>
                        <xs:enumeration value="Task"/>
                        <xs:enumeration value="ScrollingLabel"/>
                        <xs:enumeration value="TextEditBox"/>
                        <xs:enumeration value="KeyboardDialog"/>
                        <xs:enumeration value="OverhangPanelSetScene"/>
                        <xs:enumeration value="Label"/>
                        <xs:enumeration value="Rectangle"/>
                        <xs:enumeration value="PosterGrid"/>
                        <xs:enumeration value="Overhang"/>
                        <xs:enumeration value="ProgressDialog"/>
                        <xs:enumeration value="Button"/>
                        <xs:enumeration value="CheckList"/>
                        <xs:enumeration value="Dialog"/>
                        <xs:enumeration value="RadioButtonList"/>
                        <xs:enumeration value="ColorFieldInterpolator"/>
                        <xs:enumeration value="PinPad"/>
                        <xs:enumeration value="RowList"/>
                        <xs:enumeration value="LabelList"/>
                        <xs:enumeration value="LayoutGroup"/>
                        <xs:enumeration value="Scene"/>
                        <xs:enumeration value="Vector2DFieldInterpolator"/>
                        <xs:enumeration value="BusySpinner"/>
                        <xs:enumeration value="Video"/>
                        <xs:enumeration value="PinDialog"/>
                        <xs:enumeration value="Poster"/>
                        <xs:enumeration value="ParallelAnimation"/>
                        <xs:enumeration value="ScrollableText"/>
                        <xs:enumeration value="Group"/>
                        <xs:enumeration value="MiniKeyboard"/>
                        <xs:enumeration value="ListPanel"/>
                        <xs:enumeration value="FloatFieldInterpolator"/>
                        <xs:enumeration value="ContentNode"/>
                        <xs:enumeration value="Font"/>
                        <xs:enumeration value="PanelSet"/>
                        <xs:enumeration value="GridPanel"/>
                        <xs:enumeration value="MarkupGrid"/>
                        <xs:enumeration value="MaskGroup"/>
                        <xs:enumeration value="ArrayGrid"/>
                        <xs:enumeration value="Keyboard"/>
                        <xs:enumeration value="SequentialAnimation"/>
                        <xs:enumeration value="Panel"/>
                        <xs:enumeration value="Timer"/>
                        <xs:enumeration value="ButtonGroup"/>
                        <xs:enumeration value="Animation"/>
                        <xs:enumeration value="ComponentLibrary"/>
                        <xs:enumeration value="Audio"/>
                        <xs:enumeration value="AnimationBase"/>
                        <xs:enumeration value="MarkupList"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="initialFocus">
                <xs:annotation>
                    <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the ID of a node declared in the XML file to have the initial remote control focus when the component is instantiated.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="version">
                <xs:annotation>
                    <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the version of the Scene Graph API. The default is 1.0 if not specified.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:simpleType name="NA">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="option_string">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="vector2d">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="array_of_float">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="color">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="Font">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="array_of_string">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="ButtonGroup">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="uri">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="Event">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="Dialog">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="color_string_containing_hex_value">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="rect2d">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="ContentNode">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="array_of_floats">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="font">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="BusySpinner">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="array_of_Boolean">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="array_of_colors">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="array_of_vector2d">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="array_of_integer">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="array_of_Vector2Ds">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="Poster_node">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="time">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="ProgressBar_node">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="array_of_strings">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="Node">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="URI_string">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:simpleType name="Time">
        <xs:restriction base="xs:string"/>
    </xs:simpleType>
    <xs:group name="allNodes">
        <xs:choice>
            <xs:choice maxOccurs="unbounded" minOccurs="0">
                <xs:element name="Task">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Node&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The Task node class allows you to specify a function to be spawned in a different thread, and run asynchronously with respect to both the scene rendering thread and the main application thread. A Task node also allows you to run functions that cannot be run in Scene Graph node or component, typically BrightScript code functions involving operations such as reading data from servers and file system manipulation. (You also cannot, and should not, run functions in a Scene Graph application for operations that are functionally the same as Scene Graph nodes and components, such as playing videos.) A list of all the BrightScript functions and components that cannot be used in Scene Graph applications or can only be used in a Task node can be found in Scene Graph BrightScript Support.A Task node is typically used to read data from a server to create a ContentNode node to configure a Scene Graph node or component (see ). A Task node used for this purpose can be thought of as a content reader. Since ContentNode nodes are required to configure many components rendered in a scene, such as lists, panels, and grids, and you will generally want to read the data for those types of nodes from your server, you should create a Task node as a content reader for each of those components that you use in your scene. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Task"&gt;https://sdkdocs.roku.com/display/sdkdoc/Task&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="functionName" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The name of the function in the Task node component to be executed when the state field changes to RUN. The function must be declared within the scope of the Task node component.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="INIT" name="control" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only Requests a change in the run state of the spawned task. The valid options are the same as for the state field, but case-insensitive.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="ScrollingLabel">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The ScrollingLabel node class provides an automatic way to make a string scroll horizontally if it does not fit within the specified width. If the string can be drawn within the specified maximum width it is just drawn. If it does not fit within the specified maximum width, it is drawn with an ellipsis (...) at the end, then it transitions to the full string, clipped to the maximum width that scrolls left to right until the end of the string is visible, then transition back to the partial string with the ellipsis at the end. By default, this repeats continuously unless the repeatCount field is set to limit the number of times the scrolling occurs.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/ScrollingLabel"&gt;https://sdkdocs.roku.com/display/sdkdoc/ScrollingLabel&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="text" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text to be displayed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="color" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="font" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the Font node to be used.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="500" name="maxWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the maximum width of the rendered text. If the rendered text exceeds the maximum width, the scrolling behavior is automatically triggered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="height" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the label. If set to zero, the actual height is determined by the value of the numLines field if it is greater than zero. See Vertical Alignment.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="100" name="scrollSpeed" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the horizontal scrolling speed in pixels per second</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="-1" name="repeatCount" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If set to the default value of -1, the text scrolling behavior repeats continuously. If set to zero, the text will remain ellipsized and never scroll. If set to a value greater than zero, the text will scroll the specified number of times, at the end of which the text is rendered with an ellipsis at the end.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="left" name="horizAlign" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;See Horizontal Alignment.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="top" name="vertAlign" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;See Vertical Alignment.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="TextEditBox">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The TextEditBox node class is intended to display a string of characters as they are typed. When focused, it displays a flashing cursor to indicate the text insertion position.TextEditBox nodes are automatically included in the Keyboard and MiniKeyboard node classes.The default appearance of the TextEditBox is very transparent, allowing it to pick up most of its color from what is rendered underneath it. The appearance can be customized by changing the backgroundUri and other fields.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/TextEditBox"&gt;https://sdkdocs.roku.com/display/sdkdoc/TextEditBox&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="text" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Contains the string of characters being displayed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="hintText" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a string to be displayed if the length of the text field string is zero. The typical usage of this field is to prompt the user about what to enter (such as, "Enter your WiFi password").</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="15" name="maxTextLength" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the maximum length of the string that can be displayed. When used internal to the Keyboard node, maxTextLength is initialized to 75. When used in the MiniKeyboard node, maxTextLength is initialized to 25.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="cursorPosition" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;By default, this is set to the length of the text field, indicating that the next character to be entered should be appended at the end of the string. When used internal to the Keyboard and MiniKeyboard nodes, those nodes use this field to move the text insertion point.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="active" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When active is set to true, the cursor is displayed. When set to false, the cursor is hidden. When used internal to the Keyboard and MiniKeyboard nodes, those nodes set this field to true when the keyboard has focus, and false when it does not.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="secureMode" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set to true, the characters entered are briefly displayed, then replaced with an asterisk. When set to false, the characters entered are always displayed. When used internal to the Keyboard and MiniKeyboard nodes, you can access the keyboard textEditBox field to set its secureMode field. For example: myKeyboard.textEditBox.secureMode = true</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xffffffff" name="textColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the text string displayed</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xffffffff" name="hintTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the hint text string</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="-1.0" name="width" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width of the TextEditBox node. When used internal to the Keyboard and MiniKeyboard nodes, those nodes set this field to match the width of the keyboard.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="backgroundUri" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of the image rendered as the background of the TextEditBox node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="KeyboardDialog">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Dialog&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The KeyboardDialog node class is a special type of Dialog node that prompts the user to enter an alphanumeric text string. The KeyboardDialog node class includes an interrnal Keyboard node to allow the user to enter the string.The KeyboardDialog allows you to add a title (by setting the Dialog title field), a help message (by setting the Dialog message field), and a set of action buttons (by setting the Dialog node buttons field). The bulletText and graphicUrl fields of the Dialog node should not be set. If those Dialog node fields are set, the layout of the dialog will likely not look correct.Also, the KeyboardDialog node class inherits the behavior of the interrnal Keyboard node when the Options remote key is pressed. The Keyboard node class toggles between uppercase and lowercase letters when the Options remote key is pressed, to speed the entry of mixed-case strings by the user. Therefore, the optionsDialog field of the Dialog node class should not be set to true.Typically, you will want to set the KeyboardDialog node title field to prompt the user to enter the string, and add "OK" and "Cancel" buttons by setting the Dialog node buttons field to [ "OK", "Cancel" ], then observe the Dialog node class buttonSelected field to react when the user presses one of those buttons. At any time, the text field can be accessed to obtain the string entered by the user.Another typical usage of the KeyboardDialog node class adds a "Hide Text" button, with an observer function set up to toggle the secureMode field of the Keyboard node internal TextEditBox node (that is, by toggling the value of the keyboard.textEditBox.secureMode field).&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/KeyboardDialog"&gt;https://sdkdocs.roku.com/display/sdkdoc/KeyboardDialog&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="title" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Title of the dialog box</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="message" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The string to be displayed in the message region of the dialog. Newline and carriage return characters in the string result in the message being displayed as several lines of text. In BrightScript, to include a newline in a string, use chr(10). For example: message = "First line" + chr(10) + "Second line"</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="messageColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the color of the message text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="messageFont" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the font of the message text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="bulletText" type="array_of_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;An array of strings to be displayed as a list of bullet points.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="bulletTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the color of the bullet point text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="bulletTextFont" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the font of the bullet point text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="buttons" type="array_of_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only Allows a set of Button nodes to be easily created by providing an array of Button labels. Each string in the array will result in a Button node to be added to the ButtonGroup, using the string as the Button label.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="buttonGroup" type="ButtonGroup">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The dialog internal ButtonGroup node. This allows the appearance attributes of all the Button nodes in the dialog to be easily modified. Since the ButtonGroup node class is derived from the LayoutGroup node class, additional non-Button node children can also be added.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="graphicUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap to be displayed in the dialog. The bitmap is displayed below the bullet text region and above the buttons. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusButton" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only  Causes the button with the specified index to receive the focus when the ButtonGroup node has the key focus. Note that if the ButtonGroup node does not have the key focus when the focusButton field is set, the specified button will display the focus footprint as its background.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="optionsDialog" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If set to true, the dialog is automatically dismissed when the Options key is pressed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="backgroundUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap to be displayed as the dialog background. Usually this is a 9-patch image to support dynamic resizing. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="iconUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap to be displayed as a small icon next to the dialog title. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="dividerUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap to be displayed as the divider between the title region and the remainder of the dialog. Usually this is a 9-patch image to support dynamic resizing. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="close" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only Causes the dialog to be dismissed. The dialog is dismissed whenever the close field is set, regardless of whether the field is set to true or false.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="wasClosed" type="Event">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Observe-Only Set when the dialog has been closed. The field is set when the dialog close field is set, when the Back or Home key has been pressed, when the Options key has been pressed if the optionsDialog field is set to true, and when the dialog is dismissed because another dialog was displayed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="text" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Can be used to explicitly set the internal Keyboard node text string, as well as to access the string entered by the user.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="OverhangPanelSetScene">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Scene&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The OverhangPanelSetScene node class provides a convenient was to create a Scene node that has set with default Overhang and PanelSet nodes. The layout of the Overhang and PanelSet use the default sizes for SDK2 channels. The node provides access to the PanelSet and Overhang via fields that contain the node objects.scene = screen.CreateScene("OverhangPanelSetScene")&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/OverhangPanelSetScene"&gt;https://sdkdocs.roku.com/display/sdkdoc/OverhangPanelSetScene&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="invalid" name="backgroundURI" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a graphic image file to be used for the Scene node background.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0x000000FF" name="backgroundColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a background color for the scene. This color is only used if backgroundURI is set to the empty string. For example: scene.backgroundColor=0xff0000ff scene.backgroundUri = ""</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="invalid" name="dialog" type="Dialog">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Setting this field to a node extended from the Dialog node causes the dialog to be displayed</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="backExitsScene" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, then a Back key press will cause the scene to exit. If false, then Back key presses do not cause the scene to exit.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Label">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The Label node class is used to display a string of text. The Label node class supports many options including:Specifying the color of the font Specifying the font to be used by specifying a TrueType/OpenType font file Single line and multi-line text Horizontal and vertical alignment Justification Automatic ellipsizing of the text based on the specified width and number of linesAlignmentThe Label node uses the horizAlign and vertAlign fields to allow you to position the rendered text relative to a specified bounding rectangle.Horizontal AlignmentThe horizAlign field allows you to position text horizontally relative to the computed width of the label. The computed width is determined in one of two ways:If the width field is greater than zero, the computed width is the value of the width field. If the width field is equal to zero, the computed width is the rendered width of the text.There are three possible values for the horizAlign field:left The left edge of the text is drawn at the 0 x-coordinate position of the Label node local coordinate system. center The horizontal center of each line of text is positioned at the x-coordinate corresponding to half the computed width of the Label node local coordinate system. right The right edge of each line of text is positioned at x-coordinate position corresponding to the computed width of the Label node local coordinate system.Note that if the width field is equal to zero, a single line of text will be rendered (see  for more details). In that case, all three values of the horizAlign field have the same result, since the computed width equals the rendered width of the text. Vertical AlignmentThe vertAlign field allows you to position text vertically relative to the computed height of the label. The computed height is determined in one of four ways, which in some cases depend on the values set in the numLines and maxLines fields:If the height field is greater than zero, the computed height is the value of the height field. In this case, the numLines and maxLines field values are ignored. If the height field is zero and the numLines field is greater than zero, the computed height is the height required to render the number of lines specified by the numLines field value. Note that the computed height is set to the height required to render the number of lines even if the rendered text contains fewer lines. For example, if the numLines field value is 4, and the rendered text only occupies two lines, the computed height is still equal to the height required to render four lines. In this case, the value of the maxLines field is ignored. If both the height and numLines field values are set to zero, and the maxLines field value is greater than zero, the rendered text will be limited to the number of lines set in the maxLines field value. In this case, the computed height is the height of the rendered text, but that text will be limited to no more than the number of lines set in the maxLines field value. For example, if the maxLines field value is 3, and the rendered text only occupies two lines, the computed height is the height required to render two lines of text. If the maxLines field value is 3, and the rendered text would occupy five lines, only three lines are drawn, and the computed height is the height required to render those three lines. If the height, numLines and maxLines field values are all zero, the computed height is the height of the rendered text.There are three possible values for the vertAlign field:top The top edge of the text is drawn at 0 y-coordinate position of the Label node local coordinate system. center The vertical center of the rendered text is positioned at y-coordinate position corresponding to half the computed height of the Label node local coordinate system. bottom The text is drawn so that bottom edge of the rendered text is positioned at the y-coordinate position corresponding to the computed height of the Label node local coordinate system.Note that if the computed height equals the actual height of the rendered text (such as when the height and numLines field values are both zero), all three values of the vertAlign field have the same result, since the computed height equals the rendered height of the text. Alignment ExampleThe following image shows a Rectangle node with a width of 1000 pixels and a height of 500 pixels. The Rectangle node has nine Label child nodes. Each Label child node has its width field value set to 1000 and its height field value set to 500. All nine combinations of the horizAlign and vertAlign fields are used to position the labels relative to the 1000x500 bounding rectangle.WrappingThe wrap field is used to control how the text is broken into multiple lines. The two possible field values are true and false. wrap = falseIn this case, a single line of text will be displayed.If the width field value is zero, and the text does not contain any newline characters, the entire text string is rendered. If the text contains newline characters, the part of the text up to the first newline character is rendered.If the width field value is greater than zero, the text is truncated or ellipsized so only the portion of text is rendered that fits within the specified width. wrap = trueIn this case, if the width field value is greater than zero, the text is broken into several lines, each of which has width no larger than the computed width. Each newline character in the text results in a new line of text. Also, the text is broken into lines at any space or hyphen character. If any word in the text exceeds the computed width, it is broken into lines arbitrarily.If the width field value is zero and the wrap field value is true, no text is rendered.The actual numbers of lines displayed is dependent upon the values set in the height, numLines and maxLines fields.If the height field value is greater than zero, the text is broken into lines based on the value of the width field, but only the number of lines that fit into the specified height are rendered. If the displayPartialLines field value is set to true (the default), only full lines of text are rendered. If the displayPartialLines field value is false, the top or bottom line of text may be clipped vertically.If the height field value is zero, and the numLines field value is greater than zero, the text is broken into lines based on the value of the width field, and up to the number of lines of text set in the numLines field value are rendered.If both the height and numLines field values are zero, and the maxLines field value is greater than zero, the text is broken into lines based on the value of the width field, and no more than the number of lines of text set in the maxLines field value are rendered. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Label"&gt;https://sdkdocs.roku.com/display/sdkdoc/Label&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="text" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text to be displayed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="color" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="font" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the Font node to be used.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="left" name="horizAlign" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;See Horizontal Alignment.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="top" name="vertAlign" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;See Vertical Alignment.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="width" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width of the label. If set to zero, the text is always displayed as a single line.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="height" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the label. If set to zero, the actual height is determined by the value of the numLines field if it is greater than zero. See Vertical Alignment and for more details.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="numLines" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the height field value is zero, provides an alternate way to specify the height of the bounding rectangle of the label. See Vertical Alignment and for more details.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="maxLines" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the height and numLines field values are both zero, specifies the maximum number of lines of text to be displayed. See Vertical Alignment and for more details.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="wrap" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;See .</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="lineSpacing" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the text is displayed on more than one line, specifies the amount of additional space added between lines.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="displayPartialLines" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the height field value is greater than zero, used to determine whether or not the last line of visible text is displayed if it would be clipped vertically.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="ellipsizeOnBoundary" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the width field value is greater than zero, controls whether or not the last line of text displayed should be ellipsized if it extends beyonds the specified width. It is ignored if the truncateOnDelimiter field value is set to a non-empty string.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="truncateOnDelimiter" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the width field value is greater than zero, provides a set of characters that are used to determine how to truncate the last line of text that is displayed if it extends beyond the specified width. If none of the characters in the last line of text are included in the truncateOnDelimiter field value string, the entire last line is not displayed. When the value is set to a non-empty string, the ellipsizeOnBoundary field value is ignored.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="wordBreakChars" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;By default, space and hyphen characters are used to determine where lines can be divided. In addition, this field can specify additional characters to be used to determine where the text can be broken into lines.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="ellipsisText" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;By default, three dots (...) are used to ellipsize the last line of text that extends beyond the bounding rectangle. This field specifies alternate characters to be displayed when the last line of text is ellipsized.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Rectangle">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The Rectangle node class draws a solid color rectangle with the top/left corner of the rectangle drawn at the origin of the node local coordinate system. Because the Rectangle node class extends the Group node class, it can have child nodes. For example, a Rectangle node might have a child Label node, resulting in text being drawn inside of a box.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Rectangle"&gt;https://sdkdocs.roku.com/display/sdkdoc/Rectangle&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="width" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width of rectangle in local coordinates.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="height" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of rectangle in local coordinates.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="color" type="color_string_containing_hex_value">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the rectangle.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="PosterGrid">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;ArrayGrid&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The PosterGrid node is a simple grid class that can be used to display two-dimensional grids of posters. In addition to the poster, each item in the grid can include up to two lines of captions.The number of columns in the PosterGrid is fixed and the number of rows varies. The items in the grid fill each row from left to right, then top to bottom. For example, if the grid data contains 8 items and the number of columns is set to 3, then items 1, 2 and 3 will be in the first row. Items 4, 5 and 6 will be in the second row. The third row will contain items 7 and 8 in the leftmost two columns and blank space in the right column.The layout of rows and columns in the grid is very flexible. Possible layouts include:a simple layout with all posters in the grid having the same size a layout with the posters in some rows having varying heights and/or the posters in some columns having varying widths a layout with varying width rows and columns and items that occupy one or more rows and columnsThe grid items can be organized into sections that are demarcated by labelled horizontal divider lines between the sections.The PosterGrid node class includes the capability to automatically scale the loaded graphical images to fit within the target screen element area specified by the basePosterSize field value. To use this capability, select the scaling option you want as the value of the posterDisplayMode field.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/PosterGrid"&gt;https://sdkdocs.roku.com/display/sdkdoc/PosterGrid&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="itemSize" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width and height of each item in the list or grid. For list or grid items that are posters, itemSize is the value of a basePosterSize field and any sub-elements included with the poster.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusRow" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the row that will have fixed focus if the vertFocusAnimationStyle field value is set to fixedFocusWrap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusColumn" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the column that will have fixed focus for grids if the horizFocusAnimationStyle field value is set to fixedFocusWrap. This field is not used for lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="horizFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a row of grid items in response to the remote direction pad Left and Right key presses. This field is not used for lists. The possible values are: Option Effect floatingFocus Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible. fixedFocusWrap Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="vertFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a list or a column of grid items in response to the remote direction pad Up and Down key presses. The possible values are: Option Effect floatingFocus Causes the focus indicator to float up or down until it reaches the end of the list or grid column, at which point the focus indicator will stay fixed on the first or last item in the list or grid column, and the items will scroll up or down if there are items that were not visible. fixedFocusWrap Causes the column to wrap around when the focus indicator reaches the first or last item in the list or grid column, as long as the list or grid column contains enough items to fill the list or grid column. If the list or grid column does not contain enough items to fill the list or grid column, the focus indicator will float up and down. fixedFocus Causes the focus to stay fixed on the upper leftmost item. As the user scrolls down, the row containing the previously selected item scrolls up off screen. Scrolling continues until the last row is reached.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float up or down until it reaches the end of the list or grid column, at which point the focus indicator will stay fixed on the first or last item in the list or grid column, and the items will scroll up or down if there are items that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the column to wrap around when the focus indicator reaches the first or last item in the list or grid column, as long as the list or grid column contains enough items to fill the list or grid column. If the list or grid column does not contain enough items to fill the list or grid column, the focus indicator will float up and down.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus to stay fixed on the upper leftmost item. As the user scrolls down, the row containing the previously selected item scrolls up off screen. Scrolling continues until the last row is reached.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0" name="wrapDividerWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the vertFocusAnimationStyle field value is set to fixedFocusWrap, specifies the width of a bitmap used as a visual divider between the last and first list or grid items when the list or grid wraps. Only set this field to use a value with a different appearance than the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1" name="numRenderPasses" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of rendering operations to display a complex list or grid. This allows you to achieve a performance increase by specifying that individual sub-elements of the list or grid items occur on sequential rendering operations, rather than all of the item sub-elements being rendered in one rendering operation, which is the default. If you set this field to a value greater than 1, you must specify the rendering operation number for each of the item sub-elements as the renderPass field value for that sub-element. No sub-element that has a renderPass field value of 0 (the default), or has a renderPass field value greater than the value of the numRenderPasses field, will render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="sectionDividerWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, specifies the width of the section divider bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="itemClippingRect" type="rect2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a clipping region for the list or grid items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="content" type="ContentNode">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the content for the list. See Data Bindings below for more details. If the data contains section markers, section dividers will be drawn between each section. These section dividers may contain an icon and/or a string. </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="basePosterSize" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width and height of the posters in the grid.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="useAtlas" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Enables a performance optimization when most of the poster items displayed in the grid have the same size. The field value toggles the use of a texture atlas that stores the posters in the grid. The default is true, since in many cases, most of the posters in the grid have the same size as determined by the basePosterSize field value. In this case, using the texture atlas can provide a rendering performance benefit. For grids that have more complicated layouts, that include several posters that have sizes that differ from the value of basePosterSize, or for grids where there are only a few large posters (about five to eight, or posters that are about a quarter of the screen height or width) displayed at the same time, it is best for this field to be set to false.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="noScale" name="posterDisplayMode">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides automatic scaling of posters, if useAtlas is set to false. The following are the possible field values: Option Effect noScale No scaling scaleToFit Scale the image to fit into the target screen element area, preserving the aspect ratio but "letterboxing" or "pillarboxing" the image (background-color bars at the top/bottom or left/right of the image) scaleToFill Stretch the image width and height dimensions to fill the target screen element area, distorting the image if the target screen element area has a different aspect ratio than the image scaleToZooom Scale the image to fill the target screen element area, preserving the aspect ratio but not "letterboxing" or "pillarboxing" the image, with some of the image cropped out</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="noScale">
                                        <xs:annotation>
                                            <xs:documentation>No scaling</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="scaleToFit">
                                        <xs:annotation>
                                            <xs:documentation>Scale the image to fit into the target screen element area, preserving the aspect ratio but "letterboxing" or "pillarboxing" the image (background-color bars at the top/bottom or left/right of the image)</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="scaleToFill">
                                        <xs:annotation>
                                            <xs:documentation>Stretch the image width and height dimensions to fill the target screen element area, distorting the image if the target screen element area has a different aspect ratio than the image</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="scaleToZooom">
                                        <xs:annotation>
                                            <xs:documentation>Scale the image to fill the target screen element area, preserving the aspect ratio but not "letterboxing" or "pillarboxing" the image, with some of the image cropped out</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="itemSpacing" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;A vector specifying the horizontal spacing between columns and the vertical spacing between rows in the grid.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="numColumns" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of columns in the grid</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="numRows" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of visible rows in the grid. Note that the actual number of rows may be more or less than the number of visible rows depending on the number of items in the grid's content.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="rowHeights" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When specified, the rowHeights field specifies the heights of the poster for each row of the grid. This allows the height of each row of the grid to vary from row to row. The rowHeights values override the height specified in element 1 of the basePosterSize field. If the rowHeights array contains fewer elements than the number of rows needed to display all the items in the grid, element 1 of the basePosterSize field is used as the height of the excess rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="columnWidths" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When specified, the columnWidths field specifies the widths of the poster for each column of the grid. This allows the width of each column of the grid to vary from column to column. The columnWidths values override the width specified in element 0 of the basePosterSize field. If the columnWidths array contains fewer elements than the number of columns specified by the numColumns field, element 0 of the basePosterSize field is used as the width of the excess columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="rowSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When specified, the rowSpacings field specifies the spacing after each row of the grid. This allows the spacing between rows to vary from row to row. The rowSpacings values override the vertical spacing specified in element 1 of the itemSpacing field. If the rowSpacings array contains fewer elements than the number of rows needed to display all the items in the grid, element 1 of the itemSpacing field is used as the spacing after the excess rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="columnSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When specified, the columnSpacings field specifies the spacing after each column of the grid. This allows the spacing between columns to vary from column to column. The columnSpacings values override the horizontal spacing specified in element 0 of the itemSpacing field. If the columnSpacings array contains fewer elements than the number of columns specified by the numColumns field, element 0 of the itemSpacing field is used as the spacing after the excess columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="fixedLayout" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When fixedLayout is false, the PosterGrid assigns each item in the data model to sequential cells in the grid (or the section if the data model includes section information). When fixedLayout is false, the data models using the X, Y, W and H attributes to specify which cells of the grid each item should occupy, where X is the column number, Y is the row number, W is the number of columns the item occupies and H is the number of rows the item occupies. Fixed layout should only be set to true for cases where one or more items in the grid should span multiple rows or columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="imageWellBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use to suggest where images would appear for empty grids and empty sections of grids. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="loadingBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap file to display while a grid item's poster is loading.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="loadingBitmapOpacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies an opacity value used to render the loading bitmap</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="failedBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap file to display when a grid item poster fails to load</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="failedBitmapOpacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies an opacity value used to render the failed bitmap</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="caption1Font" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for the grid item first caption</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="caption1Color" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color for the grid item first caption</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="caption1NumLines" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of lines to render for the grid item first caption</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="caption2Font" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for the grid item second caption</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="caption2Color" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color for the grid item second caption</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="caption2NumLines" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of lines to render for the grid item second caption</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="captionBackgroundBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap file to render as a background for the grid item captions</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="center" name="captionHorizAlignment">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the horizontal positioning of the grid item captions. Possible values are: Value Meaning left Left-justify the caption relative to the grid item poster center Center-justify the caption relative to the grid item poster right Right-justify the caption relative to the grid item poster</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="left">
                                        <xs:annotation>
                                            <xs:documentation>Left-justify the caption relative to the grid item poster</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="center">
                                        <xs:annotation>
                                            <xs:documentation>Center-justify the caption relative to the grid item poster</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="right">
                                        <xs:annotation>
                                            <xs:documentation>Right-justify the caption relative to the grid item poster</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="below" name="captionVertAlignment">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the horizontal positioning of the grid item captions. Possible values are: Value Meaning above Position the caption so the bottom of the caption lies just above the grid item poster top Align the top of the caption with the top edge of the grid item poster center Align the vertical center of the caption with the vertical center of the of the grid item poster bottom Align the bottom of the caption with the bottom edge of the grid item poster below  Position the caption so the top of the caption lies just below the grid item poster</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="above">
                                        <xs:annotation>
                                            <xs:documentation>Position the caption so the bottom of the caption lies just above the grid item poster</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="top">
                                        <xs:annotation>
                                            <xs:documentation>Align the top of the caption with the top edge of the grid item poster</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="center">
                                        <xs:annotation>
                                            <xs:documentation>Align the vertical center of the caption with the vertical center of the of the grid item poster</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="bottom">
                                        <xs:annotation>
                                            <xs:documentation>Align the bottom of the caption with the bottom edge of the grid item poster</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="below">
                                        <xs:annotation>
                                            <xs:documentation>Position the caption so the top of the caption lies just below the grid item poster</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0" name="captionLineSpacing" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the spacing in pixels between lines of the caption</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="showBackgroundForEmptyCaptions" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If a caption background is specified, this field specifies whether or not to display the caption background when the caption text is empty</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="enableCaptionScrolling" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether or not to scroll single line captions when it is necessary to ellipsize the caption because it is wider the column containing the grid item</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="drawFocusFeedback" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether or not the focus indicator bitmap is displayed</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="drawFocusFeedbackOnTop" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether the focus indicator bitmap is drawn below or on top of the list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file used for the focus indicator when the list has focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusFootprintBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file used for the focus indicator when the list does not have focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="focusBitmapBlendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Blend the graphic image specified by focusBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by focusBitmapUri.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="focusFootprintBlendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Blend the graphic image specified by focusFootprintBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus footprint indicator graphic image with a different color than the image specified by focusFootprintBitmapUri.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="wrapDividerBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use as a visual separator between the last and first list items when the list wraps. In most case, this should be a 9-patch image that specifies both expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="36" name="wrapDividerHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the divider. The wrapDividerBitmap will be scaled to this height. The width of the wrap divider is set to the width of the list items (i.e. itemSize[0]) </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="sectionDividerBitmapUri" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use as visual separator between sections of the grid. The section dividers can include an icon and a label in addition to the section divider bitmap. Note that for sections that do not contain an icon or a title, the wrapDividerBitmapUri is used for the section dividers instead.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="sectionDividerFont" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for section divider labels</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="sectionDividerTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color for section divider labels</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="10" name="sectionDividerSpacing" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the spacing between the items appearing in the section divider (e.g. the spacing between the section divider icon, the section divider label, and the section divider bitmap). Note the section divider does not always include an icon and/or a title.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="36" name="sectionDividerHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the section dividers. The width of the section dividers is determined by the width of the list items (such as itemSize[0]) and the sectionDividerLeftOffset field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="117" name="sectionDividerMinWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the minimum width of the section divider bitmap. The section divider label will be ellipsized if necessary in order to ensure that the section divider bitmap meets the minimum width.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="sectionDividerLeftOffset" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Number of pixels to offset the left edge of the section divider relative to the left edge of the list items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="jumpToItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid item index, this causes the list to immediately update so that the specified index moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="animateToItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid item index, this causes the list to quickly scroll so that the specified index moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Overhang">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The Overhang node provides a information bar that is displayed at the top of a screen in many Roku channels. The regions occupied by the overhang can be filled with either a solid color or a bitmap.On the left side, a logo bitmap and/or a string can be displayed. If both are displayed, a vertical divider is drawn to separate them. The string is typically set to display a reminder to the user of their current location in the interface. For example, in the Roku homescreen, the string is set to "Search" while the user in the search entry portion of the user interface. Then when the user explores a search result, the string is changed to reflect the name of the content being explored.On the right side, a clock and/or an indicator that the options key (*) is available can be displayed. If both are displayed, a vertical divider is drawn to separate them.The appearance and contents of the Overhang can be customized by setting its fields to the desired values. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Overhang"&gt;https://sdkdocs.roku.com/display/sdkdoc/Overhang&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0x232323ff" name="color" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies that the area occupied by the Overhang should be filled with the specified color. The color field and the backgroundUri field are "last one wins" fields. Whichever of these fields is set later overrides the other one.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="backgroundUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of a bitmap that is used to fill the area occupied by the overhang. The color field and the backgroundUri field are "last one wins" fields. Whichever of these fields is set later overrides the other one.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="logoUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of a bitmap to be drawn on the left side of the overhang. If both a logo and a title are specified, the logo will be displayed to the left of the title, separated by a vertical divider.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="logoBaselineOffset" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a vertical adjustment to be applied to the logo to adjust its alignment relative to the overall overhang. The logo is positioned so that its baseline (as specified by this field) aligns with the baseline of the options prompt on the right side of the overhang</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="title" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a string to be displayed on the left side of the overhang. It will be drawn to the right of the logo, if a logo is specified.  If both a logo and a title are specified, the logo will be displayed to the left of the title, separated by a vertical divider.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="titleColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the title text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="showClock" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether or not the Clock is displayed as part of the annotations that appear on the right side of the Overhang.If both the clock and the options prompt are shown, the clock will be displayed to the left of the options prompt, separated by a vertical divider </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="clockColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the clock text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="clockText" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies an alternate string to display in the clock location on the right side of the overhang. If the clockText field is set to a non-empty string, that string will replace the clock display. Setting the clockText field back to an empty string will restore the display of the clock.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="showOptions" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether or not the Options prompt is displayed in as part of the annotations that appear on the right side of the Overhang. If both the clock and the options prompt are shown, the clock will be displayed to the left of the options prompt, separated by a vertical divider.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="optionsColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the options indicator when the options key is available (i.e. the showOptions field is set to true)</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xdddddd44" name="optionsDimColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the options indicator when the options key is not available (i.e. the showOptions field is set to false)</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xffffffff" name="optionsIconColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a color to tint the neutral colored options icon displayed in the overhang when the options key is available (i.e. the showOptions field is set to true). If no color is specified, the options icon will be white.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xffffffff" name="optionsIconDimColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a color to tint the neutral colored options icon displayed in the overhang when the options key is not available (i.e. the showOptions field is set to false). If no color is specified, the options icon will be pale gray.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="optionsAvailable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether the Options key is currently available. If optionsAvailable is set to true, the options prompt will have an brighter appearance. If false, the options prompt will be dimmed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="leftDividerUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of the bitmap to be used as the divider between the logo and the title on the left side of the overhang</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="leftDividerVertOffset" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a vertical offset to add to the position of the divider between the logo and the title on the left side of the overhang. By default, the bottom of the divider bitmap is drawn at baseline offset of the logo bitmap, as specified by the logoBaselineOffset field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="rightDividerUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of the bitmap to be used as the divider between the clock and the options prompt on the right side of the overhang</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="rightDividerVertOffset" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a vertical offset to add to the position of the divider between the clock and the options prompt on the left side of the overhang. By default, the vertical center of the divider bitmap is aligned to the vertical center of the options prompt.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="115" name="height" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the Overhang region. Typically this value is not overridden.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="ProgressDialog">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Dialog&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The ProgressDialog node class is a special type of Dialog node that includes the dialog title region and a spinning icon as the body of the dialog. The ProgressDialog node class uses a BusySpinner node to display the spinning icon.The message, bulleted text, graphic, and button regions of the dialog should all be empty. If those dialog regions are not empty, the layout of the dialog will likely not look correct.Not all Roku Player hardware supports arbitrary rotations. In particular, some hardware only supports 90 degree rotation increments. In those cases, the icon will step through 90 degree, 180 degree, 270 degree and back to 0 degree rotations, rather than spin smoothly.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/ProgressDialog"&gt;https://sdkdocs.roku.com/display/sdkdoc/ProgressDialog&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="title" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Title of the dialog box</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="message" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The string to be displayed in the message region of the dialog. Newline and carriage return characters in the string result in the message being displayed as several lines of text. In BrightScript, to include a newline in a string, use chr(10). For example: message = "First line" + chr(10) + "Second line"</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="messageColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the color of the message text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="messageFont" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the font of the message text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="bulletText" type="array_of_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;An array of strings to be displayed as a list of bullet points.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="bulletTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the color of the bullet point text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="bulletTextFont" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the font of the bullet point text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="buttons" type="array_of_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only Allows a set of Button nodes to be easily created by providing an array of Button labels. Each string in the array will result in a Button node to be added to the ButtonGroup, using the string as the Button label.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="buttonGroup" type="ButtonGroup">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The dialog internal ButtonGroup node. This allows the appearance attributes of all the Button nodes in the dialog to be easily modified. Since the ButtonGroup node class is derived from the LayoutGroup node class, additional non-Button node children can also be added.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="graphicUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap to be displayed in the dialog. The bitmap is displayed below the bullet text region and above the buttons. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusButton" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only  Causes the button with the specified index to receive the focus when the ButtonGroup node has the key focus. Note that if the ButtonGroup node does not have the key focus when the focusButton field is set, the specified button will display the focus footprint as its background.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="optionsDialog" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If set to true, the dialog is automatically dismissed when the Options key is pressed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="backgroundUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap to be displayed as the dialog background. Usually this is a 9-patch image to support dynamic resizing. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="iconUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap to be displayed as a small icon next to the dialog title. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="dividerUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap to be displayed as the divider between the title region and the remainder of the dialog. Usually this is a 9-patch image to support dynamic resizing. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="close" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only Causes the dialog to be dismissed. The dialog is dismissed whenever the close field is set, regardless of whether the field is set to true or false.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="wasClosed" type="Event">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Observe-Only Set when the dialog has been closed. The field is set when the dialog close field is set, when the Back or Home key has been pressed, when the Options key has been pressed if the optionsDialog field is set to true, and when the dialog is dismissed because another dialog was displayed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="busySpinner" type="BusySpinner">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides access to the BusySpinner node used by the ProgressDialog node so that the spinner icon and rotation direction can be customized.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Button">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The Button node is a simple widget that generates a buttonSelected event when the user selects it. The button can display a label and/or an icon, as well as a background image. Fields are provided to customize the label text and color depending on whether or not the button has the key focus. Similarly, the bitmaps used for the icon and background can be specified for both focused and unfocused button states.By default, the background of the button is only shown when the button has the key focus. Buttons are typically used in a ButtonGroup node that manages which button in the group will have the key focus when the ButtonGroup node receives the focus. When the ButtonGroup node has the focus, the button in the group that has the focus will display the focusBitmapUri bitmap as its background. When the ButtonGroup node does not have the focus, it remembers which button in the group had the focus and sets that button showFocusFootprint field to true, causing it to a render a "footprint" bitmap as a visual indicator that it will be the focused button when the ButtonGroup node receives the focus again. All other buttons in the ButtonGroup node do not display a background image.When a Button node is created that is not a child of a ButtonGroup node, typically the showFootprintfield field should be set to true, so that the button always displays a background image.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Button"&gt;https://sdkdocs.roku.com/display/sdkdoc/Button&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="text" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text to be displayed as the button label</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="textColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the button label when the button does not have the key focus.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0x262626ff" name="focusedTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the button label when the button has the key focus.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="textFont" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font of the button label when the button does not have the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusedTextFont" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font of the button label when the button has the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusFootprintBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the button focus "footprint" bitmap file to display when the button does not have key focus. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap. By default the "footprint" bitmap is not displayed when the button does not have the key focus. To display the background when the button is unfocused, the showFocusFootprint field must be set to true.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the button background bitmap file to display when the button has the key focus. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="iconUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap file for the button icon when the button does not have the key focus. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusedIconUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap file for the button icon when the button has the key focus. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="minWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the minimum width of the button. The minWidth field must be less than or equal to the maxWidth field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="32767" name="maxWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the maximum width of the button. The maxWidth field must be greater than or equal to the minWidth field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="64" name="height" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the button.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="showFocusFootprint" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls whether the focus "footprint" bitmap is displayed when the button does not have the key focus. Since the default value of the showFocusFootprint field is false, the "footprint" bitmap is not displayed by default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="buttonSelected" type="Event">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Observe-Only The buttonSelected field is set whenever the button is selected. The field should be used to call observer callback functions when the button is selected.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="CheckList">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;LabelList&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The CheckList node class is a simple list class that displays a list of items, some of which include checkboxes that allow the user to select or unselect that item. Each item in the list displays a text string and an optional checkbox icon positioned to the left of the text string. If the checkbox is displayed, it is shown as either an empty box, or a box with a checkmark indicator inside, indicating whether the item is in the checked or unchecked state.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/CheckList"&gt;https://sdkdocs.roku.com/display/sdkdoc/CheckList&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="numColumns" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of columns in a grid. This field is not used for lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusColumn" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the column that will have fixed focus for grids if the horizFocusAnimationStyle field value is set to fixedFocusWrap. This field is not used for lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="horizFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a row of grid items in response to the remote direction pad Left and Right key presses. This field is not used for lists. The possible values are: Option Effect floatingFocus Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible. fixedFocusWrap Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0" name="wrapDividerWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the vertFocusAnimationStyle field value is set to fixedFocusWrap, specifies the width of a bitmap used as a visual divider between the last and first list or grid items when the list or grid wraps. Only set this field to use a value with a different appearance than the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="fixedLayout" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies that a grid will have a layout of items of different widths configured by parameters included in a ContentNode node for the grid. This field is not used by lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1" name="numRenderPasses" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of rendering operations to display a complex list or grid. This allows you to achieve a performance increase by specifying that individual sub-elements of the list or grid items occur on sequential rendering operations, rather than all of the item sub-elements being rendered in one rendering operation, which is the default. If you set this field to a value greater than 1, you must specify the rendering operation number for each of the item sub-elements as the renderPass field value for that sub-element. No sub-element that has a renderPass field value of 0 (the default), or has a renderPass field value greater than the value of the numRenderPasses field, will render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="rowHeights" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing heights for each list or grid row, to allow the height of each row to vary from row to row. The specified values override the itemSize field vector2d Y-value for each list or grid row corresponding to its position in the array, in top to bottom order. If the array contains fewer elements than the number of rows needed to display all the items in the list or grid, the itemSize field vector2d Y-value is used for any unspecified rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="columnWidths" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing widths for each grid column, to allow the width of each column to vary from column to column. This field is not used by lists. The specified values override the itemSize field vector2d X-value for each grid column corresponding to its position in the array, in left to right order. If the array contains fewer elements than the number of columns needed to display all the items in the grid, the itemSize field vector2d X-value is used for any unspecified columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="rowSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing spaces between each list or grid row, to allow the spacing between rows to vary from row to row. The specified values override the itemSpacing field vector2d Y-value for each list or grid row corresponding to its position in the array, in top to bottom order. If the array contains fewer elements than the number of rows needed to display all the items in the list or grid, the itemSpacing field vector2d Y-value is used for any unspecified rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="columnSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing spaces between each grid column, to allow the spacing between columns to vary from column to column. This field is not used by lists. The specified values override the itemSpacing field vector2d X-value for each grid column corresponding to its position in the array, in left to right order. If the array contains fewer elements than the number of columns needed to display all the items in the grid, the itemSpacing field vector2d X-value is used for any unspecified columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="sectionDividerWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, specifies the width of the section divider bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="itemClippingRect" type="rect2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a clipping region for the list or grid items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="content" type="ContentNode">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the content for the list. See Data Bindings below for more details. If the data contains section markers, section dividers will be drawn between each section. These section dividers may contain an icon and/or a string. </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="itemSize" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width and height of each item in the list</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="itemSpacing" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The second value of the vector specifies the vertical spacing between items in the list. The first value of the vector is ignored.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="12" name="numRows" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of visible rows displayed. The actual number of rows may be more or less than the number of visible rows specified depending on the number of items in the list content.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="left" name="textHorizAlign">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the horizontal alignment of the text in the list item area specified by the itemSize field value (the text is always centered vertically in the list item area). The possible options are: Option Effect left Text is left-aligned right Text is right-aligned center Text is center-aligned</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="left">
                                        <xs:annotation>
                                            <xs:documentation>Text is left-aligned</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="right">
                                        <xs:annotation>
                                            <xs:documentation>Text is right-aligned</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="center">
                                        <xs:annotation>
                                            <xs:documentation>Text is center-aligned</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="color" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color for unfocused list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0x262626ff" name="focusedColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color for focused list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="font" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for unfocused list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="focusedFont" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for focused list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="drawFocusFeedback" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether or not the focus indicator bitmap is displayed</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="drawFocusFeedbackOnTop" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether the focus indicator bitmap is drawn below or on top of the list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="vertFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a list of items in response to the remote direction pad Up and Down key presses. The possible values are: Option Effect fixedFocusWrap Causes the focus indicator to float up or down until it reaches the end of the list, at which point the focus indicator will stay fixed on the first or last item in the list, and the items will scroll up or down if there are items that were not visible. floatingFocus Causes the list to wrap around when the focus indicator reaches the first or last item in the list, as long as the list contains enough items to fill the list. If the list does not contain enough items to fill the list, the focus indicator will float up and down.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float up or down until it reaches the end of the list, at which point the focus indicator will stay fixed on the first or last item in the list, and the items will scroll up or down if there are items that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the list to wrap around when the focus indicator reaches the first or last item in the list, as long as the list contains enough items to fill the list. If the list does not contain enough items to fill the list, the focus indicator will float up and down.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusRow" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the row that will have fixed focus if the vertFocusAnimationStyle field value is set to fixedFocusWrap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file used for the focus indicator when the list has focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusFootprintBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file used for the focus indicator when the list does not have focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="focusBitmapBlendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Blend the graphic image specified by focusBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by focusBitmapUri.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="focusFootprintBlendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Blend the graphic image specified by focusFootprintBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus footprint indicator graphic image with a different color than the image specified by focusFootprintBitmapUri.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="wrapDividerBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use as a wrap divider, the visual separator between the last and first list items when the list wraps. In most cases, this should be a 9-patch image that specifies both expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="wrapDividerHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the wrap divider, the visual separator between the last and first list items when the list wraps. The bitmap for the wrap divider is scaled to this height. The width of the wrap divider is set to the width of the list items as specified by the itemSize field width value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="sectionDividerBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use as visual separator between sections of the list. The section dividers can include an icon and a label in addition to the section divider bitmap. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap. For sections that do not contain an icon or a title, the bitmap for the wrap divider is used for the section dividers instead.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="sectionDividerFont" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for section divider labels</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="sectionDividerTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color for section divider labels</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="10" name="sectionDividerSpacing" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, and the section dividers are specified to include an icon and/or a label, specifies the spacing between the icon, label, and section divider bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="40" name="sectionDividerHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the section dividers. The width of the section dividers is determined by the width of the list items as specified by the itemSize field width value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="117" name="sectionDividerMinWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the minimum width of the section divider bitmap. The section divider label will be ellipsized if necessary in order to ensure that the section divider bitmap meets the minimum width.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="sectionDividerLeftOffset" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Number of pixels to offset the left edge of the section divider relative to the left edge of the list items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="jumpToItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid item index, this causes the list to immediately update so that the specified index moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="animateToItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid item index, this causes the list to quickly scroll so that the specified index moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="all false" name="checkedState" type="array_of_Boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the checked state of each item in the list. A value of true indicates the item is in the checked state. A value of false indicates that the item is in the unchecked state. When reading the value of the field, note that the field array will always include one value for each item in the list. When writing the value of the field, if the specified array includes fewer values than items in the list, the list items that are unspecified will remain in their current state. For example, if there are 10 items in the list and the field value is set to [ true, true ], items 0 and 1 will have their checked state set to true, and the checked state of the remaining items (items 3 to 9) will be unchanged.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="checkOnSelect" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls whether or not pressing the remote control OK key causes the checkedState field to automatically toggle the checked state of the currently focused list item. By default, field value is set to true, but there are use cases where other behavior may be desired. In those cases, it is up to the developer to manage the checked state of the list items by setting the checkedState field to the desired index.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="checkedIconUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the checkbox icon to use for list items that are in the checked state when that list item does not the key focus. Typically, the icon will include the outline of a box with a checkmark indicator inside. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="uncheckedIconUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the checkbox icon to use for list items that are in the unchecked state when that list item does not have the key focus. Typically, the icon will include the outline of an empty box. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusedCheckedIconUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the checkbox icon to use for list items that are in the checked state when that list item has the key focus. Typically, the icon will include the outline of a box with a checkmark indicator inside. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusedUncheckedIconUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the checkbox icon to use for list items that are in the unchecked state when that list item has the key focus. Typically, the icon will include the outline of an empty box. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Dialog">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The Dialog node class defines a modal pop-up dialog used to present the user with information requiring their immediate attention.Setting the dialog field of the current Scene node to a Dialog node causes the dialog to be displayed.The Dialog node is configured to have up to five regions: the title, message, bullet text, graphic, and button regions. All of these are optional except for the title.The title region consists of a an icon and a title label, along with a horizontal divider that visually separates the title from the rest of the dialog.The message region consist of a string that is displayed below the title divider.The bullet  text region contains a set of zero or more bullet points. It is displayed below the message.The graphic region consists of a single bitmap displayed center-aligned below the message and bullet text and above the button region.The button region contains a ButtonGroup node that contains zero or more Button nodes, arranged vertically.Dialogs are modal and intercept all key events except pressing the Home key. Dialogs are closed automatically when the user presses the Home key or the Back key. If the optionsDialog field is set to true, pressing the Options key also closes the dialog.Only a single dialog may appear at any time. If a second dialog is shown, the previous dialog is closed automatically.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Dialog"&gt;https://sdkdocs.roku.com/display/sdkdoc/Dialog&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="title" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Title of the dialog box</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="message" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The string to be displayed in the message region of the dialog. Newline and carriage return characters in the string result in the message being displayed as several lines of text. In BrightScript, to include a newline in a string, use chr(10). For example: message = "First line" + chr(10) + "Second line"</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="messageColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the color of the message text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="messageFont" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the font of the message text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="bulletText" type="array_of_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;An array of strings to be displayed as a list of bullet points.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="bulletTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the color of the bullet point text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="bulletTextFont" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the font of the bullet point text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="buttons" type="array_of_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only Allows a set of Button nodes to be easily created by providing an array of Button labels. Each string in the array will result in a Button node to be added to the ButtonGroup, using the string as the Button label.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="buttonGroup" type="ButtonGroup">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The dialog internal ButtonGroup node. This allows the appearance attributes of all the Button nodes in the dialog to be easily modified. Since the ButtonGroup node class is derived from the LayoutGroup node class, additional non-Button node children can also be added.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="graphicUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap to be displayed in the dialog. The bitmap is displayed below the bullet text region and above the buttons. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusButton" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only  Causes the button with the specified index to receive the focus when the ButtonGroup node has the key focus. Note that if the ButtonGroup node does not have the key focus when the focusButton field is set, the specified button will display the focus footprint as its background.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="optionsDialog" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If set to true, the dialog is automatically dismissed when the Options key is pressed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="backgroundUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap to be displayed as the dialog background. Usually this is a 9-patch image to support dynamic resizing. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="iconUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap to be displayed as a small icon next to the dialog title. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="dividerUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap to be displayed as the divider between the title region and the remainder of the dialog. Usually this is a 9-patch image to support dynamic resizing. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="close" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only Causes the dialog to be dismissed. The dialog is dismissed whenever the close field is set, regardless of whether the field is set to true or false.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="wasClosed" type="Event">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Observe-Only Set when the dialog has been closed. The field is set when the dialog close field is set, when the Back or Home key has been pressed, when the Options key has been pressed if the optionsDialog field is set to true, and when the dialog is dismissed because another dialog was displayed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="RadioButtonList">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;LabelList&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The RadioButtonList node class is a simple list class that can be used to display a list of mutually exclusive radio buttons. Each item in the list displays a text string and an optional check mark icon positioned to the left of the text string that indicates which of the radio buttons is currently selected.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/RadioButtonList"&gt;https://sdkdocs.roku.com/display/sdkdoc/RadioButtonList&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="numColumns" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of columns in a grid. This field is not used for lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusColumn" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the column that will have fixed focus for grids if the horizFocusAnimationStyle field value is set to fixedFocusWrap. This field is not used for lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="horizFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a row of grid items in response to the remote direction pad Left and Right key presses. This field is not used for lists. The possible values are: Option Effect floatingFocus Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible. fixedFocusWrap Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0" name="wrapDividerWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the vertFocusAnimationStyle field value is set to fixedFocusWrap, specifies the width of a bitmap used as a visual divider between the last and first list or grid items when the list or grid wraps. Only set this field to use a value with a different appearance than the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="fixedLayout" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies that a grid will have a layout of items of different widths configured by parameters included in a ContentNode node for the grid. This field is not used by lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1" name="numRenderPasses" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of rendering operations to display a complex list or grid. This allows you to achieve a performance increase by specifying that individual sub-elements of the list or grid items occur on sequential rendering operations, rather than all of the item sub-elements being rendered in one rendering operation, which is the default. If you set this field to a value greater than 1, you must specify the rendering operation number for each of the item sub-elements as the renderPass field value for that sub-element. No sub-element that has a renderPass field value of 0 (the default), or has a renderPass field value greater than the value of the numRenderPasses field, will render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="rowHeights" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing heights for each list or grid row, to allow the height of each row to vary from row to row. The specified values override the itemSize field vector2d Y-value for each list or grid row corresponding to its position in the array, in top to bottom order. If the array contains fewer elements than the number of rows needed to display all the items in the list or grid, the itemSize field vector2d Y-value is used for any unspecified rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="columnWidths" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing widths for each grid column, to allow the width of each column to vary from column to column. This field is not used by lists. The specified values override the itemSize field vector2d X-value for each grid column corresponding to its position in the array, in left to right order. If the array contains fewer elements than the number of columns needed to display all the items in the grid, the itemSize field vector2d X-value is used for any unspecified columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="rowSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing spaces between each list or grid row, to allow the spacing between rows to vary from row to row. The specified values override the itemSpacing field vector2d Y-value for each list or grid row corresponding to its position in the array, in top to bottom order. If the array contains fewer elements than the number of rows needed to display all the items in the list or grid, the itemSpacing field vector2d Y-value is used for any unspecified rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="columnSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing spaces between each grid column, to allow the spacing between columns to vary from column to column. This field is not used by lists. The specified values override the itemSpacing field vector2d X-value for each grid column corresponding to its position in the array, in left to right order. If the array contains fewer elements than the number of columns needed to display all the items in the grid, the itemSpacing field vector2d X-value is used for any unspecified columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="sectionDividerWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, specifies the width of the section divider bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="itemClippingRect" type="rect2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a clipping region for the list or grid items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="content" type="ContentNode">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the content for the list. See Data Bindings below for more details. If the data contains section markers, section dividers will be drawn between each section. These section dividers may contain an icon and/or a string. </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="itemSize" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width and height of each item in the list</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="itemSpacing" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The second value of the vector specifies the vertical spacing between items in the list. The first value of the vector is ignored.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="12" name="numRows" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of visible rows displayed. The actual number of rows may be more or less than the number of visible rows specified depending on the number of items in the list content.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="left" name="textHorizAlign">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the horizontal alignment of the text in the list item area specified by the itemSize field value (the text is always centered vertically in the list item area). The possible options are: Option Effect left Text is left-aligned right Text is right-aligned center Text is center-aligned</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="left">
                                        <xs:annotation>
                                            <xs:documentation>Text is left-aligned</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="right">
                                        <xs:annotation>
                                            <xs:documentation>Text is right-aligned</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="center">
                                        <xs:annotation>
                                            <xs:documentation>Text is center-aligned</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="color" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color for unfocused list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0x262626ff" name="focusedColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color for focused list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="font" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for unfocused list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="focusedFont" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for focused list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="drawFocusFeedback" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether or not the focus indicator bitmap is displayed</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="drawFocusFeedbackOnTop" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether the focus indicator bitmap is drawn below or on top of the list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="vertFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a list of items in response to the remote direction pad Up and Down key presses. The possible values are: Option Effect fixedFocusWrap Causes the focus indicator to float up or down until it reaches the end of the list, at which point the focus indicator will stay fixed on the first or last item in the list, and the items will scroll up or down if there are items that were not visible. floatingFocus Causes the list to wrap around when the focus indicator reaches the first or last item in the list, as long as the list contains enough items to fill the list. If the list does not contain enough items to fill the list, the focus indicator will float up and down.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float up or down until it reaches the end of the list, at which point the focus indicator will stay fixed on the first or last item in the list, and the items will scroll up or down if there are items that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the list to wrap around when the focus indicator reaches the first or last item in the list, as long as the list contains enough items to fill the list. If the list does not contain enough items to fill the list, the focus indicator will float up and down.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusRow" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the row that will have fixed focus if the vertFocusAnimationStyle field value is set to fixedFocusWrap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file used for the focus indicator when the list has focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusFootprintBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file used for the focus indicator when the list does not have focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="focusBitmapBlendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Blend the graphic image specified by focusBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by focusBitmapUri.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="focusFootprintBlendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Blend the graphic image specified by focusFootprintBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus footprint indicator graphic image with a different color than the image specified by focusFootprintBitmapUri.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="wrapDividerBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use as a wrap divider, the visual separator between the last and first list items when the list wraps. In most cases, this should be a 9-patch image that specifies both expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="wrapDividerHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the wrap divider, the visual separator between the last and first list items when the list wraps. The bitmap for the wrap divider is scaled to this height. The width of the wrap divider is set to the width of the list items as specified by the itemSize field width value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="sectionDividerBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use as visual separator between sections of the list. The section dividers can include an icon and a label in addition to the section divider bitmap. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap. For sections that do not contain an icon or a title, the bitmap for the wrap divider is used for the section dividers instead.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="sectionDividerFont" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for section divider labels</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="sectionDividerTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color for section divider labels</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="10" name="sectionDividerSpacing" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, and the section dividers are specified to include an icon and/or a label, specifies the spacing between the icon, label, and section divider bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="40" name="sectionDividerHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the section dividers. The width of the section dividers is determined by the width of the list items as specified by the itemSize field width value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="117" name="sectionDividerMinWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the minimum width of the section divider bitmap. The section divider label will be ellipsized if necessary in order to ensure that the section divider bitmap meets the minimum width.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="sectionDividerLeftOffset" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Number of pixels to offset the left edge of the section divider relative to the left edge of the list items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="jumpToItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid item index, this causes the list to immediately update so that the specified index moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="animateToItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid item index, this causes the list to quickly scroll so that the specified index moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="-1" name="checkedItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the index of the currently selected item in the list. The initial default value of -1 indicates that no radio button is currently selected. Setting the field changes the currently selected radio button list item to match the specified index.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="checkOnSelect" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls whether or not pressing the remote control OK key causes the checkedItem field value to be automatically updated to the index of the currently focused list item. By default, the field value is set to true, but there are use cases where other behavior may be desired. In those cases, it is up to the developer to manage the currently selected radio button by setting the checkedItem field value to the desired index.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="checkedIconUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the check mark icon to use for the currently selected radio button list item when that list item does not have the key focus. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusedCheckedIconUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the check mark icon to use for the currently selected radio button list item when that list item has the key focus. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="ColorFieldInterpolator">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Node&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The ColorFieldInterpolator node class specifies a keyframe animation sequence to be applied to the color field of a node (such as the color field of a Label node).All field interpolators include a set of key/keyValue field pairs that define a keyframe of the animation. Field interpolators are generally used as children of an Animation node. As the animation progresses, it sets the fraction field of its field interpolators to a value between 0 and 1, indicating the fraction of the animation progress. The keyframe fields of the interpolator are key, the percentage where the keyframe should occur, and keyValue, the value that the field should have at that fraction of the animation.For example, if a ColorFieldInterpolator node had three keyframes:0.0, 0xFF0000FF (red) 0.4, 0x00FF00FF (green) 1.0, 0x0000FFFF (blue)When the interpolator fraction field value was 0.0 (that is, 0%), the color field value would be set to red. When the fraction field value was 0.4 (that is, 40%), the color field value would be set to green. When the fraction field value was 1.0 (that is, 100%), the color field value would be set to blue.For values of the fraction field between 0.0 and 0.4 (such as 0.2 or 20%), the field value is determined by linearly interpolating the keyValue field values for the first two keyframes. In this case, since the key of 0.2 is halfway between the key at 0.0 and the key at 0.4, the field would be set to a color halfway between red and green. Similarly, when the fraction field value is between the second and third keys (that is, between 0.4 and 1.0), the field value is determined by linearly interpolating the keyValue field values of the second and third keyframes.If the first keyframe has a key field fraction value greater than zero, then the field value is equal to the keyValue field value of the first keyframe until the fraction field value reaches the first keyframe key field fraction value. Similarly, if the last keyframe has a key field fraction value less than one, the color field value is set to the keyValue field value of the last keyframe, from when the fraction field value equals the last keyframe key field fraction value percentage, and will not change as the fraction field value increases from that value to 1.0.The ColorFieldInterpolator node class works in the HSV color space. Doing the interpolation in the HSV color space produces the most intuitive, visually pleasing results when animating color values.Note that while linear interpolation is used to compute the keyValue field values for fraction field values between successive keys, non-linear easing functions may be applied to the fraction field values computed by the Animation node, so the overall animation may vary in speed. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/ColorFieldInterpolator"&gt;https://sdkdocs.roku.com/display/sdkdoc/ColorFieldInterpolator&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="fieldToInterp" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the field to interpolate. This generally refers to the field on a scene graph node that contains the color to animate, such as testRectangle.color field in the example below.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="key" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the key fractions for the interpolator keyframes. Each key fraction should be a unique value from 0 to 1 indicating the fraction of the animation where the keyValue field value should occur. Behavior is undefined if the number of values in the key field does not match the number of values in the keyValue field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="keyValue" type="array_of_colors">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the key values for the interpolator keyframes. Each value in the keyValue field array corresponds to a value in the key field array. Behavior is undefined if the number of values in the key field does not match the number of values in the keyValue field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="fraction" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the fraction to be used to compute a value for the field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="PinPad">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The PinPad node is a simple widget that allows you to enter a fixed length numeric string. The string that is entered is displayed in a set of boxes above the PinPad node keyboard, with each box displaying a single numeral of the entered string.The PinPad node must have the key focus in order to work properly.The default appearance of the PinPad node is very transparent, allowing the node to pick up most of its color from what is rendered underneath it. The appearance can be customized by changing the keyboardBitmapUri and other fields.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/PinPad"&gt;https://sdkdocs.roku.com/display/sdkdoc/PinPad&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="pin" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Contains the string of numbers that have been entered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="4" name="pinLength" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Contains the maximum number of digits that can be entered</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="secureMode" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set to true, each digit entered is displayed briefly, then replaced with an asterisk. When false, the entered digits always remain visible.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xffffffff" name="keyColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the key labels and icons when the keyboard does not have the focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xffffffff" name="focusedKeyColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the key labels and icons when the keyboard has the focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xffffffff" name="pinDisplayTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the numbers displayed in the pin display boxes</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="keyboardBitmapUri" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of an image file to be loaded to replace the default keyboard image drawn underneath the numeric keys and icons. Note that this image must be carefully designed so that the key positions match the default image. Template images for SD, HD and FHD resolutions are provided below.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="pinDisplayBitmapUri" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifed the URI of an image file to be loaded to replace the default box drawn underneath each entered digit in the pin display. This should be a 9-patch image so that it can be stretched to appropriate size depending on the pinLength field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusBitmapUri" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of an image file to be loaded to replace the keyboard focus indicator. This should be a 9-patch image so that it can be stretched to the appropriate size for the double width keys.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="showPinDisplay" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether or not the pin display that shows the entered digits is visible. In most cases, it is desirable to display the entered digits so that the user can see the string as it is entered. In some cases though, you might want to only show the keyboard part of the PinPad node. In those cases, the pin field of the node will still contain the string entered by the user, so that it can displayed in some different manner.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="RowList">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;ArrayGrid&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The RowList node class provides a vertically-scrollable list, containing rows of independent horizontally-scrollable individual items. Each item in a row can include a poster, but can also include much more complex sub-elements defined in an item component file, in the same way that items are defined in the MarkupList and MarkupGrid node classes. Like those node classes, the RowList node class provides special interface fields to the item components to allow custom appearance and animations as the user scrolls left and right through the items in a row. But the RowList node class also includes even more interface fields to provide a customized appearance as the user scrolls up and down through the rows. The items in any single row must be the same size, but different rows in the list can have different item sizes. Each row may include a left-justified title label at the top of the row, and a right-justified label at the top that displays a message of the format "item_number of total_number_of_items", indicating which item in the row currently has focus.There are two horizontal item scrolling options for the RowList node class controlled by the rowFocusAnimationStyle field. Setting the rowFocusAnimationStyle field to floatingFocus causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus will stay fixed on the first or last item in the row, and the items will scroll left or right. Setting the rowFocusAnimationStyle field to fixedFocusWrap causes each row to wrap around when navigation reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus will float left and right.The vertical row scrolling options are controlled by the vertFocusAnimationStyle field, and behave in the same way for rows as they do for list items as described in ArrayGrid.The RowList node class supports two types of item definitions. The first type provides a simple option for the common case where each item in each row is displayed as a single poster. The second variation allows the contents of each item in each row to be an instance of a Scene Graph component that defines a set of interface fields that provide for communication between the RowList node and the items it displays, similar to that used by the MarkupList and MarkupGrid node classes. In the field descriptions below, the first type is referred to as simple, and the second type is referred to as component. Most of the field descriptions below apply to both simple and component types.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/RowList"&gt;https://sdkdocs.roku.com/display/sdkdoc/RowList&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="numColumns" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of columns in a grid. This field is not used for lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusRow" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the row that will have fixed focus if the vertFocusAnimationStyle field value is set to fixedFocusWrap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusColumn" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the column that will have fixed focus for grids if the horizFocusAnimationStyle field value is set to fixedFocusWrap. This field is not used for lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="horizFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a row of grid items in response to the remote direction pad Left and Right key presses. This field is not used for lists. The possible values are: Option Effect floatingFocus Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible. fixedFocusWrap Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0" name="wrapDividerWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the vertFocusAnimationStyle field value is set to fixedFocusWrap, specifies the width of a bitmap used as a visual divider between the last and first list or grid items when the list or grid wraps. Only set this field to use a value with a different appearance than the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="fixedLayout" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies that a grid will have a layout of items of different widths configured by parameters included in a ContentNode node for the grid. This field is not used by lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1" name="numRenderPasses" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of rendering operations to display a complex list or grid. This allows you to achieve a performance increase by specifying that individual sub-elements of the list or grid items occur on sequential rendering operations, rather than all of the item sub-elements being rendered in one rendering operation, which is the default. If you set this field to a value greater than 1, you must specify the rendering operation number for each of the item sub-elements as the renderPass field value for that sub-element. No sub-element that has a renderPass field value of 0 (the default), or has a renderPass field value greater than the value of the numRenderPasses field, will render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="columnWidths" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing widths for each grid column, to allow the width of each column to vary from column to column. This field is not used by lists. The specified values override the itemSize field vector2d X-value for each grid column corresponding to its position in the array, in left to right order. If the array contains fewer elements than the number of columns needed to display all the items in the grid, the itemSize field vector2d X-value is used for any unspecified columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="columnSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing spaces between each grid column, to allow the spacing between columns to vary from column to column. This field is not used by lists. The specified values override the itemSpacing field vector2d X-value for each grid column corresponding to its position in the array, in left to right order. If the array contains fewer elements than the number of columns needed to display all the items in the grid, the itemSpacing field vector2d X-value is used for any unspecified columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="sectionDividerBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, specifies a custom bitmap to use as a visual divider between the sections of the list or grid. Only set this field to use a bitmap with a different appearance than the system default. For sections that do not include an icon or a title, the system default or custom bitmap specified as the wrapDividerBitmapUri field value is used for the section dividers. In most cases, you will want to use a 9-patch PNG bitmap with both expandable regions, which is the type of bitmap used as the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="sectionDividerFont" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, specifies a custom font to use for the section title text. Only set this field to use a different font than the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="sectionDividerTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, specifies a custom color to use for the section title text. Only set this field to use a different text color than the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="sectionDividerSpacing" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, and the section dividers are specified to include an icon and/or a label, specifies the spacing between the icon, label, and section divider bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="sectionDividerWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, specifies the width of the section divider bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="sectionDividerHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, specifies the height of the section divider bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="sectionDividerMinWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, specifies the minimum width of the section divider bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="sectionDividerLeftOffset" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, specifies the left offset of the section divider from the list or grid.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="itemClippingRect" type="rect2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a clipping region for the list or grid items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="itemComponentName" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the name of an XML component for the items in each row. An instance of this component is created on demand for each visible item of each row. The XML component must define a specific interface as detailed in RowList XML Component below.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="content" type="ContentNode">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the content for the list. The content should be a single ContentNode that has one child ContentNode for each row. These child ContentNodes for each row should themselves contains child ContentNodes for each item in the row. See Data Bindings below for more details. </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="itemSize" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width and height of rows in the list. Note that this the width of the entire row, not the width of the posters in the row.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="itemSpacing" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the spacing between rows in the list. The y-dimension of the vector specifies the vertical spacing between rows, and the x-dimension is ignored.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="numRows" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of visible rows in the list. Note that the actual number of rows may be more or less than the number of visible rows depending on the number of items in the list content.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="rowHeights" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the heights of each row of the list. This allows the height of each row of the list to vary from row to row. The values override the height specified in the y-dimension value of the itemSize field. If the array contains fewer elements than the number of rows in the data model, the y-dimension value of the itemSize field is used as the height of the extra rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="rowSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the spacing after each row of the list. This allows the spacing between rows to vary from row to row. The values override the vertical spacing specified in y-dimension value of the itemSpacing field. If the array contains fewer elements than the number of rows in the data model, the y-dimension value of the itemSpacing field is used as the spacing after the extra rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="rowItemSize" type="array_of_vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width and height of the items in each row. The array of values must include at least one element. If the array contains fewer elements than the number of rows in the data model, the last value in the array is used as the size for the extra rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="rowItemSpacing" type="array_of_vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the spacing between items in each row. The x-dimension of each array value specifies the horizontal spacing between list items in the corresponding row. If the array contains fewer elements than the number of rows in the data model, the last value in the array is used as the spacing for the extra rows. If the array contains no values, no space will be included between list items in all rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="focusXOffset" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the x-dimension offset of the first fully visible item in each row relative to the left edge of the list. In most cases, the first fully visible item in each row will be positioned at the left edge of the list, so this field does not need to be specified. If the array contains fewer elements than the number of rows in the data model, the last value in the array is used as the x-dimension offset for the extra rows. If the array contains no values, the default x-dimension offset of 0.0 is used.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="rowLabelOffset" type="array_of_vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the offset of the row label for each row. The x-dimension specifies the horizontal offset of the label from the left edge of the row. The y-dimension component specifies the vertical spacing between the label and the list items in the row. If the array contains fewer elements than the number of rows in the data model, the last value in the array is used as the offset for the labels of the extra rows. If the array specified contains no values, a default offset value of [0,0] is used.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="showRowLabel" type="array_of_Boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether the row label on the left edge of each row is displayed. If the array contains fewer elements than the number of rows in the data model, the last value in array is used to control the display of the row label for the extra rows. If the array contains no values, no row labels are displayed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="showRowCounter" type="array_of_Boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether the "item_number of total_number_of_items" label on the right edge of each row is displayed. Note that the "item_number of total_number_of_items" label is only displayed for the focused row even if the showRowCounter field value for that row is set to true. If the array contains fewer elements than the number of rows in the data model, the last value in array is used to control the display of the "item_number of total_number_of_items" label for the extra rows. If the array contains no values, no "item_number of total_number_of_items" labels are displayed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="rowFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a row of items in response to the remote direction pad Left and Right key presses. The possible values are:  Option Effect floatingFocus Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible. fixedFocusWrap Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="vertFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a list or a column of grid items in response to the remote direction pad Up and Down key presses. The possible values are: Option Effect floatingFocus Causes the focus indicator to float up or down until it reaches the end of the list, at which point the focus indicator will stay fixed on the first or last row in the list, and the rows will scroll up or down if there are rows that were not visible. fixedFocusWrap Causes the column to wrap around when the focus indicator reaches the first or last row in the list, as long as the list contains enough rows to fill the list. If the list does not contain enough rows to fill the list, the focus indicator will float up and down. fixedFocus Causes the focus to stay fixed on the upper row. As the user scrolls down, the row containing the previously selected item scrolls up off screen. Scrolling continues until the last row is reached.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float up or down until it reaches the end of the list, at which point the focus indicator will stay fixed on the first or last row in the list, and the rows will scroll up or down if there are rows that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the column to wrap around when the focus indicator reaches the first or last row in the list, as long as the list contains enough rows to fill the list. If the list does not contain enough rows to fill the list, the focus indicator will float up and down.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus to stay fixed on the upper row. As the user scrolls down, the row containing the previously selected item scrolls up off screen. Scrolling continues until the last row is reached.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0xffffffff" name="rowLabelColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the row and "item_number of total_number_of_items" labels.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="rowLabelFont" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for the row and "item_number of total_number_of_items" labels.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="drawFocusFeedbackOnTop" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether the focus indicator bitmap is drawn below or on top of the list items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="drawFocusFeedback" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether or not the focus indicator bitmap is displayed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="imageWellBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use to suggest where images would appear for empty lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file used for the focus indicator when the list has focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusFootprintBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file used for the focus indicator when the list does not have focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="focusBitmapBlendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Blend the graphic image specified by focusBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by focusBitmapUri.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="focusFootprintBlendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Blend the graphic image specified by focusFootprintBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus footprint indicator graphic image with a different color than the image specified by focusFootprintBitmapUri.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="loadingBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap file to display while a list item poster is loading.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="loadingBitmapOpacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies an opacity value used to render the loading bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="failedBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap file to display when a list item poster fails to load.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="failedBitmapOpacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies an opacity value used to render the failed bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="wrapDividerBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use as a visual separator between the last and first list items when the list wraps. In most case, this should be a 9-patch image that specifies both expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="wrapDividerHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the divider. The wrap divider bitmap will be scaled to this height. The width of the wrap divider is set to the width of the list items (that is, the x-dimension value of the itemSize field).  </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="jumpToItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid item index, causes the list to immediately update so that the specified row moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="jumpToRowItem" type="array_of_integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid [ row, col ] index pair, causes the list to immediately update so that the specified row, col item moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="animateToItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid item index, causes the list to quickly scroll so that the specified row moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="LabelList">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;ArrayGrid&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The LabelList node class is a simple list class that can be used to display a list of items. Each item can include a text string and an optional icon positioned to the left of the text string.The list items can be organized into sections that are demarcated by labelled horizontal divider lines between the sections.In most cases, you will want to populate the content of a LabelList (or other similar components like PosterGrids, etc.) from a content feed, web service API, or some other dynamic data source.  However, to illustrate the basics of how a LabelList is constructed and used, here is a simple example of creating a LabelList and populating it with static data.  Static data in a LabelList may be useful for channel screens such as settings or menus with fixed items.Static LabelList Configuration&lt;LabelList id = "moviemenu" translation = "[160,92]" itemSize = "[440,48]" &gt; &lt;ContentNode id = "moviemenucontent" role = "content" &gt; &lt;ContentNode title = "Comedy" /&gt; &lt;ContentNode title = "Drama" /&gt; &lt;ContentNode title = "Action" /&gt; &lt;ContentNode title = "Horror" /&gt; &lt;/ContentNode&gt; &lt;/LabelList&gt;This code renders the LabelList shown below.  In this screen shot, the user has scrolled down one item to highlight "Drama" showing the separator after the last list item.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/LabelList"&gt;https://sdkdocs.roku.com/display/sdkdoc/LabelList&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="numColumns" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of columns in a grid. This field is not used for lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusColumn" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the column that will have fixed focus for grids if the horizFocusAnimationStyle field value is set to fixedFocusWrap. This field is not used for lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="horizFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a row of grid items in response to the remote direction pad Left and Right key presses. This field is not used for lists. The possible values are: Option Effect floatingFocus Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible. fixedFocusWrap Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0" name="wrapDividerWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the vertFocusAnimationStyle field value is set to fixedFocusWrap, specifies the width of a bitmap used as a visual divider between the last and first list or grid items when the list or grid wraps. Only set this field to use a value with a different appearance than the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="fixedLayout" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies that a grid will have a layout of items of different widths configured by parameters included in a ContentNode node for the grid. This field is not used by lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1" name="numRenderPasses" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of rendering operations to display a complex list or grid. This allows you to achieve a performance increase by specifying that individual sub-elements of the list or grid items occur on sequential rendering operations, rather than all of the item sub-elements being rendered in one rendering operation, which is the default. If you set this field to a value greater than 1, you must specify the rendering operation number for each of the item sub-elements as the renderPass field value for that sub-element. No sub-element that has a renderPass field value of 0 (the default), or has a renderPass field value greater than the value of the numRenderPasses field, will render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="rowHeights" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing heights for each list or grid row, to allow the height of each row to vary from row to row. The specified values override the itemSize field vector2d Y-value for each list or grid row corresponding to its position in the array, in top to bottom order. If the array contains fewer elements than the number of rows needed to display all the items in the list or grid, the itemSize field vector2d Y-value is used for any unspecified rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="columnWidths" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing widths for each grid column, to allow the width of each column to vary from column to column. This field is not used by lists. The specified values override the itemSize field vector2d X-value for each grid column corresponding to its position in the array, in left to right order. If the array contains fewer elements than the number of columns needed to display all the items in the grid, the itemSize field vector2d X-value is used for any unspecified columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="rowSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing spaces between each list or grid row, to allow the spacing between rows to vary from row to row. The specified values override the itemSpacing field vector2d Y-value for each list or grid row corresponding to its position in the array, in top to bottom order. If the array contains fewer elements than the number of rows needed to display all the items in the list or grid, the itemSpacing field vector2d Y-value is used for any unspecified rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="columnSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing spaces between each grid column, to allow the spacing between columns to vary from column to column. This field is not used by lists. The specified values override the itemSpacing field vector2d X-value for each grid column corresponding to its position in the array, in left to right order. If the array contains fewer elements than the number of columns needed to display all the items in the grid, the itemSpacing field vector2d X-value is used for any unspecified columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="sectionDividerWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, specifies the width of the section divider bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="itemClippingRect" type="rect2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a clipping region for the list or grid items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="content" type="ContentNode">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the content for the list. See Data Bindings below for more details. If the data contains section markers, section dividers will be drawn between each section. These section dividers may contain an icon and/or a string. </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="itemSize" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width and height of each item in the list</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="itemSpacing" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The second value of the vector specifies the vertical spacing between items in the list. The first value of the vector is ignored.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="12" name="numRows" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of visible rows displayed. The actual number of rows may be more or less than the number of visible rows specified depending on the number of items in the list content.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="left" name="textHorizAlign">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the horizontal alignment of the text in the list item area specified by the itemSize field value (the text is always centered vertically in the list item area). The possible options are: Option Effect left Text is left-aligned right Text is right-aligned center Text is center-aligned</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="left">
                                        <xs:annotation>
                                            <xs:documentation>Text is left-aligned</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="right">
                                        <xs:annotation>
                                            <xs:documentation>Text is right-aligned</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="center">
                                        <xs:annotation>
                                            <xs:documentation>Text is center-aligned</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="color" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color for unfocused list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0x262626ff" name="focusedColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color for focused list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="font" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for unfocused list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="focusedFont" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for focused list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="drawFocusFeedback" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether or not the focus indicator bitmap is displayed</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="drawFocusFeedbackOnTop" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether the focus indicator bitmap is drawn below or on top of the list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="vertFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a list of items in response to the remote direction pad Up and Down key presses. The possible values are: Option Effect fixedFocusWrap Causes the focus indicator to float up or down until it reaches the end of the list, at which point the focus indicator will stay fixed on the first or last item in the list, and the items will scroll up or down if there are items that were not visible. floatingFocus Causes the list to wrap around when the focus indicator reaches the first or last item in the list, as long as the list contains enough items to fill the list. If the list does not contain enough items to fill the list, the focus indicator will float up and down.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float up or down until it reaches the end of the list, at which point the focus indicator will stay fixed on the first or last item in the list, and the items will scroll up or down if there are items that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the list to wrap around when the focus indicator reaches the first or last item in the list, as long as the list contains enough items to fill the list. If the list does not contain enough items to fill the list, the focus indicator will float up and down.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusRow" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the row that will have fixed focus if the vertFocusAnimationStyle field value is set to fixedFocusWrap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file used for the focus indicator when the list has focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusFootprintBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file used for the focus indicator when the list does not have focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="focusBitmapBlendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Blend the graphic image specified by focusBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by focusBitmapUri.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="focusFootprintBlendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Blend the graphic image specified by focusFootprintBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus footprint indicator graphic image with a different color than the image specified by focusFootprintBitmapUri.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="wrapDividerBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use as a wrap divider, the visual separator between the last and first list items when the list wraps. In most cases, this should be a 9-patch image that specifies both expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="wrapDividerHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the wrap divider, the visual separator between the last and first list items when the list wraps. The bitmap for the wrap divider is scaled to this height. The width of the wrap divider is set to the width of the list items as specified by the itemSize field width value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="sectionDividerBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use as visual separator between sections of the list. The section dividers can include an icon and a label in addition to the section divider bitmap. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap. For sections that do not contain an icon or a title, the bitmap for the wrap divider is used for the section dividers instead.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="sectionDividerFont" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for section divider labels</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="sectionDividerTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color for section divider labels</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="10" name="sectionDividerSpacing" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, and the section dividers are specified to include an icon and/or a label, specifies the spacing between the icon, label, and section divider bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="40" name="sectionDividerHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the section dividers. The width of the section dividers is determined by the width of the list items as specified by the itemSize field width value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="117" name="sectionDividerMinWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the minimum width of the section divider bitmap. The section divider label will be ellipsized if necessary in order to ensure that the section divider bitmap meets the minimum width.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="sectionDividerLeftOffset" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Number of pixels to offset the left edge of the section divider relative to the left edge of the list items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="jumpToItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid item index, this causes the list to immediately update so that the specified index moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="animateToItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid item index, this causes the list to quickly scroll so that the specified index moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="LayoutGroup">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/LayoutGroup"&gt;https://sdkdocs.roku.com/display/sdkdoc/LayoutGroup&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="vert" name="layoutDirection">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls the layout direction. Value Use horiz Positions the children in a row from left to right vert Positions the children in a column from top to bottom</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="horiz">
                                        <xs:annotation>
                                            <xs:documentation>Positions the children in a row from left to right</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="vert">
                                        <xs:annotation>
                                            <xs:documentation>Positions the children in a column from top to bottom</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="left" name="horizAlignment">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the alignment point in the horizontal direction. The effect of the value set depends on the whether the layoutDirection field value is set to either horiz or vert. Value layoutDirection  Use left  vert Aligns the left edges of each child in the column, and sets the LayoutGroup node local x-coordinate origin at the left edge of the children horiz Sets the LayoutGroup node local x-coordinate origin at the left edge of the first child center  vert Aligns the centers of each child in the column, and sets the LayoutGroup node local x-coordinate origin at the center alignment point horiz Sets the LayoutGroup node local x-coordinate origin at the center of the horizontal row of children right  vert Aligns the right edges of each child in the column, and sets the LayoutGroup node local x-coordinate origin is at the right edge of the children horiz Sets the LayoutGroup node local x-coordinate origin at the right edge of the last child</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="left">
                                        <xs:annotation>
                                            <xs:documentation>Aligns the left edges of each child in the column, and sets the LayoutGroup node local x-coordinate origin at the left edge of the children - Sets the LayoutGroup node local x-coordinate origin at the left edge of the first child</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="center">
                                        <xs:annotation>
                                            <xs:documentation>Aligns the centers of each child in the column, and sets the LayoutGroup node local x-coordinate origin at the center alignment point - Sets the LayoutGroup node local x-coordinate origin at the center of the horizontal row of children</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="right">
                                        <xs:annotation>
                                            <xs:documentation>Aligns the right edges of each child in the column, and sets the LayoutGroup node local x-coordinate origin is at the right edge of the children - Sets the LayoutGroup node local x-coordinate origin at the right edge of the last child</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="top" name="vertAlignment">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the alignment point in the vertical direction. The effect of the value set depends on the whether the layoutDirection field value is set to either horiz or vert. Value layoutDirection  Use top  horiz Aligns the top edges of each child in the row, and sets the LayoutGroup node local y-coordinate origin at the top edge of the children vert Sets the LayoutGroup node local y-coordinate origin at the top edge of the first child center  horiz Aligns the centers of each child in the row, and sets the LayoutGroup node local y-coordinate origin at the center alignment point vert Sets the LayoutGroup node local y-coordinate origin at the center of the vertical column of children bottom  horiz Aligns the bottom edges of each child in the row, and sets the LayoutGroup node local y-coordinate origin at the bottom edge of the children vert Sets the LayoutGroup node local y-coordinate origin at the bottom edge of the last child</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="top">
                                        <xs:annotation>
                                            <xs:documentation>Aligns the top edges of each child in the row, and sets the LayoutGroup node local y-coordinate origin at the top edge of the children - Sets the LayoutGroup node local y-coordinate origin at the top edge of the first child</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="center">
                                        <xs:annotation>
                                            <xs:documentation>Aligns the centers of each child in the row, and sets the LayoutGroup node local y-coordinate origin at the center alignment point - Sets the LayoutGroup node local y-coordinate origin at the center of the vertical column of children</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="bottom">
                                        <xs:annotation>
                                            <xs:documentation>Aligns the bottom edges of each child in the row, and sets the LayoutGroup node local y-coordinate origin at the bottom edge of the children - Sets the LayoutGroup node local y-coordinate origin at the bottom edge of the last child</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="itemSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls the spacing before or after each child in the layout direction. By default, no space is added between the children. If the field value array is set with a single value, and the addItemSpacingAfterChild field value is set to true, that amount of space is inserted after each child is positioned. If the addItemSpacingAfterChild field value is set to false, the space is inserted before each child is positioned. If the field value array has more than one value, the first value specifies the spacing before or after the first item, the second value specifies the spacing before or after the second item, and so on. If there are fewer values in the field value array than needed, the final value is repeated as needed. If there are more values in the field value array than needed, the extra values are ignored.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="addItemSpacingAfterChild" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls how the spaces specified in the itemSpacings field are inserted. By default, the field value is set to true. This causes the specified spaces to be inserted after the child is positioned. If the field value is set to false, the specified item space is inserted before the child is positioned.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Vector2DFieldInterpolator">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Node&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Vector2DFieldInterpolator specifies a keyframe animation sequence to be applied to a pair Vector2D field of a node. Most typically, this is used to animate the (x,y) coordinates of a node's translation field.All field interpolators include a set of key/keyValue pairs that define a keyframe of the animation. Field interpolators are generally used as children of an Animation node. As the animation progresses, it sets the fraction field of its field interpolators to a value between 0 and 1, indicating the percentage of the Animation's progress. The keyframes of the interpolator include a "key", the percentage where the keyframe should occur, and a "keyValue", the value that the field should have at that percentage.For example, if a Vector2DFieldInterpolator had three keyframes, (0.0, [0.0, 0.0]), (0.4, [500.0, 0.0]) and (1.0, [500, 200.0]), then when the interpolator's fraction field was 0.0 (i.e. 0%), the field would be set to [0.0, 0.0]. When fraction was 0.4 (i.e. 40%), the field would be set to [500.0, 0.0]. When fraction was 1.0 (i.e. 100%), the field would be set to [500.0, 200.0].For values of fraction between 0.0 and 0.4 (e.g. 0.2 or 20%), the field value is determined by linearly interpolating the keyValues for the first two keyframes. In this case, since the key of 0.2 is halfway between the key at 0.0 and the key at 0.4, the field would be set to [250.0, 0.0] (halfway between the point [0.0, 0.0] and [200.0, 0.0]. Similarly, when fraction is between the second and third keys (i.e. between 0.4 and 1.0), the field value is determined by linearly interpolating the keyValues of the second and third keyframes.For this example, if the field being interpolated were the translation field of a Poster node parented to the Scene node, the Poster would originally be positioned with its top/left corner at the upper, left corner of the screen. As the animation proceeded from 0% to 40% complete, the Poster would slide horizontally to the right until it's top/left corner was at x=500.0, y=0.0. As the animation continued from 40% to 100% complete, the Poster would slide vertically down until its top/left corner was at x=500.0, y=200.0.If the first keyframe has a key percentage greater than zero, then the field value will be equal to the keyValue of the first keyframe until fraction reaches the first keyframe's key percentage. Similarly, if the last keyframe has a key percentage less than one, the field value will be set to the keyValue of the last keyframe from when fraction equals the the last keyframe's key percentage and will not change as fraction increases from that value to 1.0.Note that while linearly interpolation is used to compute the keyValue's for fraction values between successive keys, non-linear easing functions may be applied to the fraction values computed by the Animation node, so the overall animation may vary in speed. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Vector2DFieldInterpolator"&gt;https://sdkdocs.roku.com/display/sdkdoc/Vector2DFieldInterpolator&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="fieldToInterp" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the field to interpolate. The string should contain the ID of a node in the scene and the name of a field of that node, separated by a colon. For example, "title:translation" would indicate that the interpolator should be applied to the translation field of a node whose id field was "title". The specified field must be of type Vector2D.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="key" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the key percentages for the interpolator's keyframes. Each key percentage should be a unique value from 0 to 1 indicating the percentage of the animation where the keyValue should occur.Behavior is undefined if the number of values in the key field does not match the number of values in the keyValue array.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="keyValue" type="array_of_Vector2Ds">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the key values or the interpolator's keyframes. Each value in the keyValue array corresponds to a value in the key field's array.Behavior is undefined if the number of values in the key field does not match the number of values in the keyValue field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="fraction" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the percentage to be used to compute a value for the field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="BusySpinner">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Poster&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The BusySpinner node class is a simple widget that displays a continuously rotating bitmap. Since the BusySpinner node class uses an internal Poster node instance, the busy spinner bitmap can be specified by setting the internal Poster node uri field.is a sample channel that demonstrates usage of the BusySpinner.Not all Roku Player hardware versions support arbitrary rotations. In particular, some hardware versions only support 90 degree rotation increments. In those cases, the icon will step through 90 degree, 180 degree, 270 degree and back to 0 degree rotations, rather than spin smoothly.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/BusySpinner"&gt;https://sdkdocs.roku.com/display/sdkdoc/BusySpinner&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="uri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of the image file. Images included as part of the application package can be referenced using the pkg:/images prefix. Images included as part of the application package that are to be localized can be referenced using the pkg:/locale/images/ prefix (see TBD link TBD for information on localizing application package graphical images).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="width" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width of the image in local coordinates. If set to 0.0, the width of the bitmap from the image file is used. If set to a value greater than 0.0, the bitmap is scaled to that width.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="height" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the image in local coordinates. If set to 0.0, the height of the bitmap from the image file is used. If set to a value greater than 0.0, the bitmap is scaled to that height.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="loadSync" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the image is loaded synchronously and appears immediately. If false, the image is loaded asynchronously in a background thread and may not appear immediately. Be careful when setting this field to true, as it might cause brief glitches in the rendering while the image is being fetched and loaded.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="loadWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Scale the graphical image to the specified width when loaded, preserving aspect ratio. If set to the default, no load-time scaling occurs. If the width field is not set, the loadWidth field is used as the default width of the displayed image.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="loadHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Scale the graphical image to the specified height when loaded, preserving aspect ratio. If set to the default, no load-time scaling occurs. If the height field is not set, the loadHeight field is used as the default height of the displayed image.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="noScale" name="loadDisplayMode">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides automatic scaling of graphical images after loading. The following are the possible field values: Option Effect noScale No scaling: original image will be loaded, and scaled to fill image dimensions on each rendering. scaleToFit Scale the image to fit into the target screen element area, preserving the aspect ratio but "letterboxing" or "pillarboxing" the image (background-color bars at the top/bottom or left/right of the image) scaleToFill Stretch the image dimensions to fill the target screen element area, distorting the image if the target screen element area has a different aspect ratio than the image scaleToZoom Scale the image to fill the target screen element area, preserving the aspect ratio but not "letterboxing" or "pillarboxing" the image, with some of the image cropped out</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="noScale">
                                        <xs:annotation>
                                            <xs:documentation>No scaling: original image will be loaded, and scaled to fill image dimensions on each rendering.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="scaleToFit">
                                        <xs:annotation>
                                            <xs:documentation>Scale the image to fit into the target screen element area, preserving the aspect ratio but "letterboxing" or "pillarboxing" the image (background-color bars at the top/bottom or left/right of the image)</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="scaleToFill">
                                        <xs:annotation>
                                            <xs:documentation>Stretch the image dimensions to fill the target screen element area, distorting the image if the target screen element area has a different aspect ratio than the image</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="scaleToZoom">
                                        <xs:annotation>
                                            <xs:documentation>Scale the image to fill the target screen element area, preserving the aspect ratio but not "letterboxing" or "pillarboxing" the image, with some of the image cropped out</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="blendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Can be used to tint the image by multiplying the color of each pixel by the specified value. If this value is not set to a value other than the default value, no color blending will be performed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="loadingBitmapOpacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used to control the rendering opacity of the graphical image that indicates a bitmap is loading. This value multiplies the Poster node opacity.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="failedBitmapOpacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used to control the rendering opacity of the graphical image that indicates a bitmap failed to load. This value multiplies the Poster node opacity.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="internal instance default" name="poster" type="Poster_node">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Set the uri field of the Poster node to select the bitmap for the busy spinner</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="control">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the operational state of the busy spinner. Option Effect none No operational state set. The busy spinner will run if not set to "stop". start Starts the busy spinner if not running stop Stops the busy spinner if running</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="none">
                                        <xs:annotation>
                                            <xs:documentation>No operational state set. The busy spinner will run if not set to "stop".</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="start">
                                        <xs:annotation>
                                            <xs:documentation>Starts the busy spinner if not running</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="stop">
                                        <xs:annotation>
                                            <xs:documentation>Stops the busy spinner if running</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="true" name="clockwise" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether the bitmap rotates in a clockwise or counterclockwise direction</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1" name="spinInterval" type="time">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The number of seconds to complete a 360-degree rotation of the spinner image. A value of 0 will cause the spinner to remain stationary and not spin.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Video">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt; The Video node class provides controlled play of live or VOD video.The Video node includes a wide variety of internal nodes to support trick play, playback buffering indicators, and so forth. Playback buffering indicators, to indicate buffering before initial playback as well as re-buffering, use an internal instance of a ProgressBar node. For trick play, an internal instance of a TrickPlayBar node is provided. For display of BIF images for DVD-like chapter selection, an internal instance of a BIFDisplay node is provided.To set the specific video playback parameters for a particular video, set the Content Meta-Data attributes for the video in a ContentNode node, and assign the ContentNode node to the content field of the Video node.Video playback can then be controlled by setting the value of control field, such as setting the field value to play to begin playback.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Video"&gt;https://sdkdocs.roku.com/display/sdkdoc/Video&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="width" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the width of the video play window in pixels. If set to 0.0 (the default), the video play window is set to the width of the entire display screen.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="height" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the height of the video play window in pixels. If set to 0.0 (the default), the video play window is set to the height of the entire display screen.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="NULL" name="content" type="ContentNode">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the required and optional play parameters and descriptive for the video.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="control">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the desired play state for the video, such as starting or stopping the video play. Getting the value of this field returns the most recent value set, or none if no value has been set. In order to dynamically monitor the actual state of the video, see the state field. Option Effect none No play state set  play Start video play stop Stop video play pause Pause video play resume Resume video play after a pause replay Replay video</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="none">
                                        <xs:annotation>
                                            <xs:documentation>No play state set</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="play">
                                        <xs:annotation>
                                            <xs:documentation>Start video play</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="stop">
                                        <xs:annotation>
                                            <xs:documentation>Stop video play</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="pause">
                                        <xs:annotation>
                                            <xs:documentation>Pause video play</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="resume">
                                        <xs:annotation>
                                            <xs:documentation>Resume video play after a pause</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="replay">
                                        <xs:annotation>
                                            <xs:documentation>Replay video</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0.5" name="notificationInterval" type="time">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The interval between notifications to observers of the position field, specified as the number of seconds. If the value is 0, no notifications are delivered. This value may be read or modified at any time.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="enableTrickPlay" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls whether trickplay is allowed during playback.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="internal instance default" name="bifDisplay">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Component that displays BIFs and allows navigation. The fields of this internal node are as follows: Field Type Default Use frameBgBlendColor color 0xFFFFFFFF A color to be blended with the image displayed behind individual BIF images displayed on the screen. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place. frameBgImageUri uri "" The URI of an image to be displayed behind individual frames on the screen. The actual frame image is displayed opaquely on top of this background, so only the outer edges of this image are visible. Because of that, this background image typically appears as a border around the video frame. If the frameBgBlendColor field is set to a value other than the default, that color will be blended with the background image.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="color">
                                        <xs:annotation>
                                            <xs:documentation>A color to be blended with the image displayed behind individual BIF images displayed on the screen. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="uri">
                                        <xs:annotation>
                                            <xs:documentation>The URI of an image to be displayed behind individual frames on the screen. The actual frame image is displayed opaquely on top of this background, so only the outer edges of this image are visible. Because of that, this background image typically appears as a border around the video frame. If the frameBgBlendColor field is set to a value other than the default, that color will be blended with the background image.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="internal instance default" name="bufferingBar">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Component that shows the progress of re-buffering, after video playback has started. The fields of this internal node are as follows: Field Type Default Use emptyBarBlendColor color 0xFFFFFFFF A color to be blended with the graphical image specified in the emptyBarImageUri field. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place. emptyBarImageUri uri "" A 9-patch or ordinary PNG of the bar presenting the remaining work to be done. This is typically displayed on the right side of the track, and is blended with the color specified in the emptyBarBlendColor field, if set to a non-default value. filledBarBlendColor color 0xFFFFFFFF This color will be blended with the graphical image specified in the filledBarImageUri field. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place. filledBarImageUri uri "" A 9-patch or ordinary PNG of the bar that represents the completed portion of the work represented by this ProgressBar node. This is typically displayed on the left side of the track. This will be blended with the color specified by the filledBarBlendColor field, if set to a non-default value. trackBlendColor color 0xFFFFFFFF This color is blended with the graphical image specified by trackImageUri field. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place. trackImageUri uri "" A 9-patch or ordinary PNG of the track of the progress bar, which surrounds the filled and empty bars. This will be blended with the color specified by the trackBlendColor field, if set to a non-default value. percentage integer top The percentage of the work that is done. Setting this field controls the visual appearance of the ProgressBar node. width float 0.0 The width of this ProgressBar node. If this is 0.0, the platform default width is used. height float 0.0 The height of the ProgressBar node. If this is 0.0, the system default height will be used.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="color">
                                        <xs:annotation>
                                            <xs:documentation>This color is blended with the graphical image specified by trackImageUri field. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="uri">
                                        <xs:annotation>
                                            <xs:documentation>A 9-patch or ordinary PNG of the track of the progress bar, which surrounds the filled and empty bars. This will be blended with the color specified by the trackBlendColor field, if set to a non-default value.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="color">
                                        <xs:annotation>
                                            <xs:documentation>This color is blended with the graphical image specified by trackImageUri field. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="uri">
                                        <xs:annotation>
                                            <xs:documentation>A 9-patch or ordinary PNG of the track of the progress bar, which surrounds the filled and empty bars. This will be blended with the color specified by the trackBlendColor field, if set to a non-default value.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="color">
                                        <xs:annotation>
                                            <xs:documentation>This color is blended with the graphical image specified by trackImageUri field. The blending is performed by multiplying this value with each pixel in the image. If not changed from the default value, no blending will take place.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="uri">
                                        <xs:annotation>
                                            <xs:documentation>A 9-patch or ordinary PNG of the track of the progress bar, which surrounds the filled and empty bars. This will be blended with the color specified by the trackBlendColor field, if set to a non-default value.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="integer">
                                        <xs:annotation>
                                            <xs:documentation>The percentage of the work that is done. Setting this field controls the visual appearance of the ProgressBar node.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="float">
                                        <xs:annotation>
                                            <xs:documentation>The height of the ProgressBar node. If this is 0.0, the system default height will be used.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="float">
                                        <xs:annotation>
                                            <xs:documentation>The height of the ProgressBar node. If this is 0.0, the system default height will be used.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="system default" name="bufferingTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The color of the text displayed near the buffering bar defined by the bufferingBar field, when the buffering bar is visible. If this is 0, the system default color is used. To set a custom color, set this field to a value other than 0x0.  </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="internal instance default" name="retrievingBar" type="ProgressBar_node">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Component that shows the progress of initial retrieving of the video, prior to starting playback. The fields of this internal node are the same as for the bufferingBar field, which are the fields of the internal ProgressBar node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="retrievingTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The color of the text displayed near the retrieving bar, when the retrieving bar defined in the retrievingBar field is visible. If this is 0, the system default color is used. To set a custom color, set this field to a value other than 0x0.  </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="internal instance default" name="trickPlayBar">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The visible TrickPlayBar node. The fields of this internal node are as follows: Field Type Default Use currentTimeMarkerBlendColor color 0xFFFFFFFF This is blended with the marker for the current playback position. This is typically a small vertical bar displayed in the TrickPlayBar node when the user is fast-forwarding or rewinding through the video.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="color">
                                        <xs:annotation>
                                            <xs:documentation>This is blended with the marker for the current playback position. This is typically a small vertical bar displayed in the TrickPlayBar node when the user is fast-forwarding or rewinding through the video.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0" name="cgms">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the CGMS (Copy Guard Management System) on analog outputs to the desired level. The valid values are: Value Effect 0 No copy restriction 1 Copy no more 2 Copy once allowed 3 No copying permitted</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="0">
                                        <xs:annotation>
                                            <xs:documentation>No copy restriction</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="1">
                                        <xs:annotation>
                                            <xs:documentation>Copy no more</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="2">
                                        <xs:annotation>
                                            <xs:documentation>Copy once allowed</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="3">
                                        <xs:annotation>
                                            <xs:documentation>No copying permitted</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="Off" name="globalCaptionMode">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the value of the global Roku closed-caption mode. This can be used to allow the user or the application to change the closed-caption mode in an application just before or during video playback. The possible options are: Option Effect "Off" Turns the global Roku closed-caption mode off. "On" Turns the global Roku closed-caption mode on. "Instant replay" Sets the global Roku closed-caption setting to display captions only during instant replay. "When mute" Sets the global Roku closed-caption setting to display captions only when the volume is muted. (This only applies to Roku TVs.)</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="&quot;Off&quot;">
                                        <xs:annotation>
                                            <xs:documentation>Turns the global Roku closed-caption mode off.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="&quot;On&quot;">
                                        <xs:annotation>
                                            <xs:documentation>Turns the global Roku closed-caption mode on.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="&quot;Instant replay&quot;">
                                        <xs:annotation>
                                            <xs:documentation>Sets the global Roku closed-caption setting to display captions only during instant replay.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="&quot;When mute&quot;">
                                        <xs:annotation>
                                            <xs:documentation>Sets the global Roku closed-caption setting to display captions only when the volume is muted. (This only applies to Roku TVs.)</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="false" name="enableScreenSaverWhilePlaying" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Set this to true to allow the screensaver to activate even if video is playing, as long as that video does not cover 50% or more of the screen. Set to false to block the screensaver activating if any video is playing.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="audioTrack" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The track identifier of the audio being played. Reading this field will return the track identifier of the audio being played, and writing this value will change the audio track.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="subtitleTrack" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The identifier of the selected subtitle track. Subtitles may or may not be visible on the screen, depending upon the user's caption setting. Reading this field will return the identifier of the current subtitle track, and setting the field will change the track.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="mute" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Set to true to mute the audio of the video currently playing in the Video node. Set to false to restore audio.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="timedMetaDataSelectionKeys" type="array_of_strings">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the video stream contains timed meta data such as ID3 tags, any meta data with a key matching an entry in this array will be set into the timedMetaData field. If any entry in this array is "*", then all timed meta data will be selected.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="invalid" name="seek" type="time">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only Sets the current position in the video. The value is the number seconds from the beginning of the stream, specified as a double.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="PinDialog">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Dialog&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The PinDialog node class is a special type of Dialog node that prompts the user to enter a numeric string. The PinDialog node class includes an internal PinPad node to allow the user to input a numeric value, such as a PIN.The PinDialog node class allows you to add a title (by setting the Dialog node title field), a message (by setting the Dialog node message field), and a set of action buttons (by setting the Dialog node buttons field). The bulletText and graphicUrl fields of the Dialog node should not be set. If those fields are set, the layout of the PinDialog node will likely not look correct.Typically, you will want to set the Dialog node title field to prompt the user to enter a PIN, and add "OK" and "Cancel" buttons by setting the Dialog node buttons field to [ "OK", "Cancel" ], then observe the Dialog node buttonSelected field to react when the user presses one of those buttons. At any time, the PinDialog node pin field can be accessed to obtain the PIN value entered by the user.The PinDialog node displays a privacy hint at the bottom of the dialog instructing the user how to show/hide the PinPad node focus indicator with the Options remote key. This provides more privacy for the user when entering a PIN. You should not override this default behavior of the Options remote key in the PinDialog node.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/PinDialog"&gt;https://sdkdocs.roku.com/display/sdkdoc/PinDialog&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="title" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Title of the dialog box</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="message" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The string to be displayed in the message region of the dialog. Newline and carriage return characters in the string result in the message being displayed as several lines of text. In BrightScript, to include a newline in a string, use chr(10). For example: message = "First line" + chr(10) + "Second line"</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="messageColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the color of the message text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="messageFont" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the font of the message text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="bulletText" type="array_of_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;An array of strings to be displayed as a list of bullet points.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="bulletTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the color of the bullet point text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="bulletTextFont" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the font of the bullet point text</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="buttons" type="array_of_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only Allows a set of Button nodes to be easily created by providing an array of Button labels. Each string in the array will result in a Button node to be added to the ButtonGroup, using the string as the Button label.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="buttonGroup" type="ButtonGroup">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The dialog internal ButtonGroup node. This allows the appearance attributes of all the Button nodes in the dialog to be easily modified. Since the ButtonGroup node class is derived from the LayoutGroup node class, additional non-Button node children can also be added.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="graphicUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap to be displayed in the dialog. The bitmap is displayed below the bullet text region and above the buttons. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusButton" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only  Causes the button with the specified index to receive the focus when the ButtonGroup node has the key focus. Note that if the ButtonGroup node does not have the key focus when the focusButton field is set, the specified button will display the focus footprint as its background.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="optionsDialog" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If set to true, the dialog is automatically dismissed when the Options key is pressed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="backgroundUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap to be displayed as the dialog background. Usually this is a 9-patch image to support dynamic resizing. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="iconUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap to be displayed as a small icon next to the dialog title. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="dividerUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a bitmap to be displayed as the divider between the title region and the remainder of the dialog. Usually this is a 9-patch image to support dynamic resizing. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="close" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only Causes the dialog to be dismissed. The dialog is dismissed whenever the close field is set, regardless of whether the field is set to true or false.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="wasClosed" type="Event">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Observe-Only Set when the dialog has been closed. The field is set when the dialog close field is set, when the Back or Home key has been pressed, when the Options key has been pressed if the optionsDialog field is set to true, and when the dialog is dismissed because another dialog was displayed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="pin" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Can be used to explicitly set the internal PinPad node PIN value, as well as to access the PIN value entered by the user.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="privacyHintColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, the color of the privacy hint shown at the bottom of the dialog.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Poster">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The Poster node class draws an image with the top/left corner located at the origin of the node local coordinate system. Because the Poster node class extends the Group node class, a Poster node can have child nodes. For example, a Poster node might have a Label node as a child that draws an annotation on top of the poster.The Poster node class supports JPEG and PNG image files.The Poster node class includes the capability to automatically scale graphical images to different sizes as they are loaded, by setting the loadWidth and loadHeight field values. After the graphical images are loaded, the images can be scaled to fit within the target screen element area specified by the width and height field values. To use this capability, select the scaling option you want as the value of the loadDisplayMode field.In order for the load scaling options to work, the option fields must be set in XML markup before the uri field.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Poster"&gt;https://sdkdocs.roku.com/display/sdkdoc/Poster&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="uri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of the image file. Images included as part of the application package can be referenced using the pkg:/images prefix. Images included as part of the application package that are to be localized can be referenced using the pkg:/locale/images/ prefix (see TBD link TBD for information on localizing application package graphical images).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="width" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width of the image in local coordinates. If set to 0.0, the width of the bitmap from the image file is used. If set to a value greater than 0.0, the bitmap is scaled to that width.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="height" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the image in local coordinates. If set to 0.0, the height of the bitmap from the image file is used. If set to a value greater than 0.0, the bitmap is scaled to that height.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="loadSync" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the image is loaded synchronously and appears immediately. If false, the image is loaded asynchronously in a background thread and may not appear immediately. Be careful when setting this field to true, as it might cause brief glitches in the rendering while the image is being fetched and loaded.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="loadWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Scale the graphical image to the specified width when loaded, preserving aspect ratio. If set to the default, no load-time scaling occurs. If the width field is not set, the loadWidth field is used as the default width of the displayed image.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="loadHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Scale the graphical image to the specified height when loaded, preserving aspect ratio. If set to the default, no load-time scaling occurs. If the height field is not set, the loadHeight field is used as the default height of the displayed image.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="noScale" name="loadDisplayMode">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides automatic scaling of graphical images after loading. The following are the possible field values: Option Effect noScale No scaling: original image will be loaded, and scaled to fill image dimensions on each rendering. scaleToFit Scale the image to fit into the target screen element area, preserving the aspect ratio but "letterboxing" or "pillarboxing" the image (background-color bars at the top/bottom or left/right of the image) scaleToFill Stretch the image dimensions to fill the target screen element area, distorting the image if the target screen element area has a different aspect ratio than the image scaleToZoom Scale the image to fill the target screen element area, preserving the aspect ratio but not "letterboxing" or "pillarboxing" the image, with some of the image cropped out</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="noScale">
                                        <xs:annotation>
                                            <xs:documentation>No scaling: original image will be loaded, and scaled to fill image dimensions on each rendering.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="scaleToFit">
                                        <xs:annotation>
                                            <xs:documentation>Scale the image to fit into the target screen element area, preserving the aspect ratio but "letterboxing" or "pillarboxing" the image (background-color bars at the top/bottom or left/right of the image)</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="scaleToFill">
                                        <xs:annotation>
                                            <xs:documentation>Stretch the image dimensions to fill the target screen element area, distorting the image if the target screen element area has a different aspect ratio than the image</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="scaleToZoom">
                                        <xs:annotation>
                                            <xs:documentation>Scale the image to fill the target screen element area, preserving the aspect ratio but not "letterboxing" or "pillarboxing" the image, with some of the image cropped out</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="blendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Can be used to tint the image by multiplying the color of each pixel by the specified value. If this value is not set to a value other than the default value, no color blending will be performed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="loadingBitmapOpacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used to control the rendering opacity of the graphical image that indicates a bitmap is loading. This value multiplies the Poster node opacity.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="failedBitmapOpacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used to control the rendering opacity of the graphical image that indicates a bitmap failed to load. This value multiplies the Poster node opacity.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="ParallelAnimation">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;AnimationBase&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The ParallelAnimation node class allows you to specify that a set of animations should occur simultaneously. The children of a ParallelAnimation node specify the set of animations to be executed. Note that the use of the delay field in the child animations allows the start of the child animations to be offset from one another, if desired.The state field is set to running when any of the child animations is in progress. Once all the animations have run to completion, the state field is set to stopped. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/ParallelAnimation"&gt;https://sdkdocs.roku.com/display/sdkdoc/ParallelAnimation&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="control">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls the animation. Supported options include: Option Effect none Initial state with no associated action start Always plays the animation from the beginning stop Stops the animation in its current state pause Pauses the animation in its current state resume If paused, resumes the animation from its current state. If the animation is not paused, plays the animation from the beginning. finish Jumps to the end of the animation, then stops. All animated fields will be immediately set to their final values as if the animation had completed.  </xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="none">
                                        <xs:annotation>
                                            <xs:documentation>Initial state with no associated action</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="start">
                                        <xs:annotation>
                                            <xs:documentation>Always plays the animation from the beginning</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="stop">
                                        <xs:annotation>
                                            <xs:documentation>Stops the animation in its current state</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="pause">
                                        <xs:annotation>
                                            <xs:documentation>Pauses the animation in its current state</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="resume">
                                        <xs:annotation>
                                            <xs:documentation>If paused, resumes the animation from its current state. If the animation is not paused, plays the animation from the beginning.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="finish">
                                        <xs:annotation>
                                            <xs:documentation>Jumps to the end of the animation, then stops. All animated fields will be immediately set to their final values as if the animation had completed.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="false" name="repeat" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls whether the animation stops when it finishes (false) or repeats from the beginning (true)</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="delay" type="time">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Delays the start of the animation by the specified number of seconds</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="ScrollableText">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The ScrollableText node class provides an interactive, vertically scrolling pane of text. This is typically used to display several paragraphs of text to the user that are too long to fit onto the display, such as a license agreement.AlignmentThe ScrollableText node class uses the horizAlign and vertAlign fields to allow you to position the rendered text relative to a specified bounding rectangle.Horizontal AlignmentThe horizAlign field allows you to position text horizontally relative to the computed width of the ScrollableText node. The computed width is determined by subtracting the width of the scrollbar from the value specified by the width field.There are three possible values for the horizAlign field:left The left edge of the text is drawn at the 0 x-coordinate position of the ScrollableText node's local coordinate system. center The horizontal center of each line of text is positioned at the x-coordinate corresponding to half the computed width of the ScrollableText node's local coordinate system. right The right edge of each line of text is positioned at x-coordinate position corresponding to the computed width of the ScrollableText node's local coordinate system.In most cases, the horizAlign field should remain set to left.Vertical AlignmentThe vertAlign field allows you to position text vertically relative to the height of the ScrollableText node, as specified by the height field.There are three possible values for the vertAlign field:top  The top edge of the text is drawn at 0 y-coordinate position of the ScrollableText node's local coordinate system. center  The vertical center of the rendered text is positioned at y-coordinate position corresponding to half the computed height of the ScrollableText node's local coordinate system. bottom  The text is drawn so that bottom edge of the rendered text is positioned at the y-coordinate position corresponding to the computed height of the ScrollableText node's local coordinate system.In most cases, the vertAlign field should remain set to top.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/ScrollableText"&gt;https://sdkdocs.roku.com/display/sdkdoc/ScrollableText&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="text" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text to be displayed.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="color" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="font" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the Font node to be used.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="width" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width of the node. This includes both the area where the text is rendered in addition to the scroll bar on the right.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="height" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the node. If the text to be displayed is larger than this height, a scrollbar is automatically added on the right, allowing users to scroll up and down using the remote's arrow keys.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="8" name="lineSpacing" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the text is displayed on more than one line, specifies the amount of additional space added between lines.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="left" name="horizAlign" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;See Horizontal Alignment.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="top" name="vertAlign" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;See Vertical Alignment.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="scrollbarTrackBitmapUri" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of an image file to be loaded to replace the default scrollbar track. This should be a 9-patch image so that it can be stretched to the appropriate height specifed by the height field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="scrollbarThumbBitmapUri" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of an image file to be loaded to replace the default scrollbar thumb. This should be a 9-patch image so that it can be stretched to the appropriate size.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Group">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Node&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Group is the base class of all renderable nodes. Group also provides fields that control the transformation, visibility and opacity of themselves and all of their children.Each Group defines a local coordinate system relative to the coordinate system of its parent node. A 2D matrix that describes how points in the local coordinate system can be transformed into the parent node coordinate system is constructed from the values of the translation, rotation, scale, and scaleRotateCenter fields.The 2D matrix is computed using the values of these four fields in the following order:translating by the negative of the scaleRotateCenter field value scaling by the the scale field value rotating by the rotation field value translating by the the scaleRotateCenter field value translating by the translation field valueIn matrix math terms, the overall 2D matrix is:M = C(-1) S R C TWhere:M is the total matrix C is a 2D translation matrix that describes the location of the scale/rotation center in the node's local coordinate system C(-1) is the inverse of C S is a 2D scaling matrix R is a 2D rotation matrix T is a 2D translation matrixIn nearly all cases, either the default values for these four fields will be used (in which case, the local coordinate system of the node is the same as the parent node coordinate system), or only a translation will be specified (in which, the local coordinate system is a simple offset from the parent node coordinate system).&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Group"&gt;https://sdkdocs.roku.com/display/sdkdoc/Group&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="MiniKeyboard">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The MiniKeyboard node class allows a user to enter a string of letters and numerals. The string entered is displayed in a TextEditBox node that is part of the MiniKeyboard node.The MiniKeyboard node is intended for users to enter a simple case-insensitive string consisting of the letters A-Z and the numerals 0-9. It is intended for use in functions such as "Search", where the entered string need not support general case-sensitive text entry. For general text entry, use a Keyboard node instead.The MiniKeyboard node must have the key focus in order to work properly.The default appearance of the MiniKeyboard node is very transparent, allowing the keyboard to pick up most of its color from what is rendered underneath it. The appearance can be customized by changing the keyboardBitmapUri and other fields.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/MiniKeyboard"&gt;https://sdkdocs.roku.com/display/sdkdoc/MiniKeyboard&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="text" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Contains the string of characters that has been entered</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xffffffff" name="keyColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the key labels and icons when the Keyboard node does not have the focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xffffffff" name="focusedKeyColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the key labels and icons when the Keyboard node has the focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="keyboardBitmapUri" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of an image file to replace the default keyboard image drawn underneath the key label and icons. Note that this image must be carefully designed so that the key positions match the default image. Template images for SD, HD and FHD resolutions are provided below.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusBitmapUri" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of an image file to replace the default keyboard focus indicator. This should be a 9-patch image so that it can be stretched to the appropriate size for the double width keys.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="showTextEditBox" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether or not the internal TextEditBox node is displayed. In most cases, it is desirable to display the TextEditBox node so that the user can see the string as it is entered. In some cases though, you might want to only show the Keyboard node. In those cases, the text field of the node will still contain the string entered by the user so that it can displayed in some different manner.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="lowerCase" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether the 26 letter keys are displayed as lowercase or uppercase.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="ListPanel">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Panel&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The ListPanel node class allows you to easily create a Panel that adheres to the Roku layout and behavior for panels that contain a LabelList or MarkupList node. The ListPanel provides the following functionality:Resolution appropriate positioning and sizing of the list node Automatic key focus handling (i.e. the list node is set to receive key events when the ListPanel is given the key focus by the PanelSet) Left-justified and right-justified labels that can be used to provide descriptive information about the list (e.g. "1 of N", etc.). These labels are automatically positioned and sized appropriately. Simple mechanism for setting up the case where focusing any item in the grid triggers the creation of a new panel to add to the PanelSet Default fade in/out animation of the next panel when the simple mechanism is used Default fade out mask effect applied to the list items at the bottom of the panelAutomatic Create Next Panel FunctionalityOne key feature of the ListPanel node is providing a simple mechanism for setting up the common use case where each time a new item in the grid receives the focus, a new "next" panel is added to the PanelSet. This mechanism is enabled or disabled by setting the createNextPanelOnItemFocus field to true or false.createNextPanelOnItemFocus should be set to true when a new right panel should be displayed each time the list's focused item changes. For example, in the Roku Homescreen, when you navigate up/down the Settings list, a new right panel is displayed that contains information about the currently focused list item. createNextPanelOnItemFocus should be set to false when the right panel should not change in response to the list's focus changes. When the create next panel mechanism is enabled and the user presses the up or down arrow key, the panel to the right of the ListPanel smoothly fades out, then when the user releases the arrow key, a new right panel is created, added to the PanelSet and smoothly faded in. To implement this, the ListPanel automatically triggers the fade out of the right panel when the up or down arrow key is pressed. When the arrow key is released, the ListPanel will set the createNextPanelIndex field to the index into the list's content that corresponds to the newly focused list item. In response to the createNextPanelIndex field being set, the ListPanel's control logic must be written to mmediately create the Panel node for the new right panel and set the nextPanel field to that Panel. The Panel creation must occur in the main scene graph render thread.The createNextPanelIndex field is guaranteed to be set exactly once whenever a new right panel needs to be created and populated with the data that corresponds to the specified index. This may happen when the ListPanel's data is changed, in response to up or down arrow key releases, or when the PanelSet's moves the focus onto the ListPanel from the left.For efficiency, sometimes the control logic for the ListPanel may create and hold onto Panel pointers internally so that the next Panel does not have to be newly created each the createNextPanelIndex field is set. If this is done, it is important to never reuse the current Panel node, as that Panel may still be fading out when the new next Panel needs to be created. A typical use case, where all the right Panels are identical other than the data they display, is to create a single pair of Panel nodes and alternate between them each time the createNextPanelIndex field is set, updating the panel data based on the specified list index.LabelList Specific UsageNotesIf you set the list field to a LabelList node, the default values for the itemSize, itemSpacing, numRows and translation fields for the LabelList will be automatically set to the recommended default values for Roku channels. By default, the panel will use the "narrow" panelSize. It is possible to override these default values, but in most cases, that will not be necessary.MarkupList Specific Usage NotesIf you set the list field to a MarkupList node, because the MarkupList is by nature custom, you will generally need to set the MarkupList's itemSize, itemSpacing and numRows fields. The ListPanel will position the list appropriately.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/ListPanel"&gt;https://sdkdocs.roku.com/display/sdkdoc/ListPanel&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="narrow" name="panelSize">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only  Specifies one of the default panel sizes. Setting the field causes the width and leftPosition fields to be set to values that match the SDK2 preferred layout for a panel of the specified size. Value Meaning narrow Set the width and leftPosition fields to the values for a narrow Panel medium Set the width and leftPosition fields to the values for a medium width Panel wide Set the width and leftPosition fields to the values for a wide Panel full Set the width and leftPosition fields to the values for a full width Panel Note that PanelSet usage mandates that whenever two Panels are visible, they should include either one narrow and one wide panel or two medium width panels. If one Panel is visible, it's panelSize should be set to "full".</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="narrow">
                                        <xs:annotation>
                                            <xs:documentation>Set the width and leftPosition fields to the values for a narrow Panel</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="medium">
                                        <xs:annotation>
                                            <xs:documentation>Set the width and leftPosition fields to the values for a medium width Panel</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="wide">
                                        <xs:annotation>
                                            <xs:documentation>Set the width and leftPosition fields to the values for a wide Panel</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="full">
                                        <xs:annotation>
                                            <xs:documentation>Set the width and leftPosition fields to the values for a full width Panel</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="388" name="width" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width of the panel in pixels. In most cases, this should be set by setting the panelSize field to one of the pre-configured settings.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="-1" name="height" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the panel. In most cases, this will be set by the PanelSet and should treated as a read-only value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="105" name="leftPosition" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the horizontal position of the panel relative to the left edge of the PanelSet (which is a the left edge of the display by default). In most cases, this should be set by setting the panelSize field to one of the pre-configure settings.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="overhangTitle" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When the panel is used as part of the OverhangPanelSetScene, setting the overhangTitle field will cause that text to be displayed as the title in the overhang when the panel slides into the left position of the PanelSet.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="clockText" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When the panel is used as part of the OverhangPanelSetScene, setting the clockText field will cause that text to be displayed instead of the clock in the overhang when the panel slides into the left position of the PanelSet.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="optionsAvailable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When the panel is used as part of the OverhangPanelSetScene, setting optionsAvailable will enable/disable the options button handling when the panel slides into the left position of the PanelSet. The overhang's options prompt will change appearance to provide feedback to the user that the options button is enabled/disabled.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="leftOrientation" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When the panel is used as part of the OverhangPanelSetScene, leftOrientation will be set to true when the panel moves into the left position of the PanelSet and set to false when the panel moves into the right position of the PanelSet.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="leftOnly" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The leftOnly field provides information to the PanelSet that this Panel should never appear in the right position of the PanelSet. When the panel slides into the right position, the PanelSet initiates another slide in the same direction so that the panel does not end up on the right.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="hasNextPanel" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The hasNextPanel field provides information to the PanelSet as to whether or not this panel has another panel to its right. If set to true, the PanelSet's right arrow indicator is displayed and pressing the right arrow button on the remote triggers the PanelSet to move the focus one panel to the right, sliding the Panels as needed to make sure the panel that has the focus ends up onscreen. If set to false, the PanelSet's right arrow indicator is not displayed and the right arrow button does not trigger any change to the focused panel.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="isFullScreen" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The isFullScreen field indicates that this panel should be the only panel displayed (i.e. it will take up both the left and right positions in the PanelSet.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1" name="goBackCount" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Setting goBackCount field to a value greater than 1 causes the PanelSet to move the focus back that many panels when the user presses the left arrow button, sliding the Panels as needed to make sure the panel that has the focus ends up onscreen.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="isBackEnabled" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The isBackEnabled field provides information to the PanelSet as to whether or not this panel has another panel to its left. If set to true, the PanelSet's left arrow indicator is displayed and pressing the left arrow button on the remote triggers the PanelSet to move the focus "goBackCount" panels to the left, sliding the Panels as needed to make sure the panel that has the focus ends up onscreen. If set to false, the PanelSet's left arrow indicator is not displayed and the left arrow button does not trigger any change to the focused panel.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="selectButtonMovesPanelForward" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set to true, pressing the OK/Select button on the remote control causes the PanelSet focus to move to the next panel.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="isOffscreenLeft" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;This field is set by the PanelSet to indicate that the panel is positioned offscreen of the left edge of the PanelSet. This field is often observed to cancel outstanding load requests for images that are displayed on the panel.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="NULL" name="list" type="Node">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The list field should be set to either a LabelList or MarkupList node to be displayed in the Panel. See the LabelList and MarkupList notes above about setting up the list's layout.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="Label node" name="leftLabel" type="Node">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The leftLabel field is set to a Label node that is positioned just above the left/top corner of the list. Setting the Label node's text field will cause that text string to be displayed. Setting other fields of the Label node can be used to adjust the Label's text color and other visual attributes.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="Label node" name="rightLabel" type="Node">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The rightLabel field is set to a Label node that is positioned just above the right/top corner of the list. Setting the Label node's text field will cause that text string to be displayed. Setting other fields of the Label node can be used to adjust the Label's text color and other visual attributes. The rightLabel is often used to display a "1 of N" message that reflects the index of the list's focused item.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="showSectionLabels" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If showSectionLabels is set to true and the data for the list node is divided into sections, the Title attribute of the current section will be displayed as the leftLabel of the list. As the list items scroll, the leftLabel will smoothly transition as each section of the list reaches the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="nextPanel" type="Node">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-only When the createNextPanlOnItemFocus field is true, the nextPanel field should be set to a Panel node to the next panel to add to the PanelSet in response to the createNextPanelIndex field being set. It must be set immediately in repsonse to the createNextPanelIndex field being set.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="createNextPanelOnItemFocus" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set to true, the Create Next Panel mechanism is enabled (i.e. the createNextPanelIndex field will be set when a new list item receives the focus). When set to false, the Create Next Panel mechanism is disabled (i.e. the createNextPanelIndex field will not be set when a new list item receives the focus).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="FloatFieldInterpolator">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Node&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The FloatFieldInterpolator node class specifies a keyframe animation sequence to be applied to a floating point field of a node (such as, an opacity, width or height value.)All field interpolators include a set of key/keyValue pairs that define a keyframe of the animation. Field interpolators are generally used as children of an Animation node. As the animation progresses, it sets the fraction field of its field interpolators to a value between 0 and 1, indicating the percentage of the Animation's progress. The keyframes of the interpolator include a "key", the percentage where the keyframe should occur, and a "keyValue", the value that the field should have at that percentage.For example, if a FloatFieldInterpolator had three keyframes, (0.0, 10.0), (0.4, 200.0) and (1.0, 87.0), then when the interpolator's fraction field was 0.0 (i.e. 0%), the field would be set to 10.0. When fraction was 0.4 (i.e. 40%), the field would be set to 200.0. When fraction was 1.0 (i.e. 100%), the field would be set to 87.0.For values of fraction between 0.0 and 0.4 (e.g. 0.2 or 20%), the field value is determined by linearly interpolating the keyValues for the first two keyframes. In this case, since the key of 0.2 is halfway between the key at 0.0 and the key at 0.4, the field would be set to 10.0 + 0.5 * (10.0 + 200.0) = 105.0. Similarly, when fraction is between the second and third keys (i.e. between 0.4 and 1.0), the field value is determined by linearly interpolating the keyValues of the second and third keyframes.If the first keyframe has a key percentage greater than zero, then the field value will be equal to the keyValue of the first keyframe until fraction reaches the first keyframe's key percentage. Similarly, if the last keyframe has a key percentage less than one, the field value will be set to the keyValue of the last keyframe from when fraction equals the the last keyframe's key percentage and will not change as fraction increases from that value to 1.0.Note that while linearly interpolation is used to compute the keyValue's for fraction values between successive keys, non-linear easing functions may be applied to the fraction values computed by the Animation node, so the overall animation may vary in speed.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/FloatFieldInterpolator"&gt;https://sdkdocs.roku.com/display/sdkdoc/FloatFieldInterpolator&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="fieldToInterp" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the field to interpolate. The string should contain the ID of a node in the scene and the name of a field of that node, separated by a colon. For example, "title:width" would indicate that the interpolator should be applied to the width field of a node whose id field was "title". The specified field must be of type float.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="key" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the key percentages for the interpolator's keyframes. Each key percentage should be a unique value from 0 to 1 indicating the percentage of the animation where the keyValue should occur.Behavior is undefined if the number of values in the key field does not match the number of values in the keyValue field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="keyValue" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the key values or the interpolator's keyframes. Each value in the keyValue array corresponds to a value in the key field's array.The interpolator's behavior is undefined if the number of values in the key field does not match the number of values in the keyValue field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="fraction" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the percentage to be used to compute a value for the field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="ContentNode">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Node&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The ContentNode node class allows you to specify the data used to configure a node or component. Many nodes and components require a ContentNode node as the specification of their content field in order to be properly configured. In general, lists, grids, and panels require a ContentNode node for configuration. The data included in a ContentNode node can be data such as the text for labels in the node or component, and the spacing between items in a list, grid, or panel, including data to create custom lists, grids, and panels. The reference information for every node or component that requires a ContentNode node includes a section that details the requirements of the ContentNode node for that node or component.ContentNode nodes defined as the specification for a node or component content field are typically structured as one ContentNode parent node, with a hierarchy of child nodes that specify the actual data, and sections of data if needed. For example, a node can have several sections that divide the entire list, each with their own section heading, and specific items in that section of the list. The ContentNode node for that LabelList node should have two levels of child ContentNode nodes, one level for the data to configure the list sections, and then another level of child ContentNode nodes for the data for each item in that list section.A ContentNode node can also be used to specify the data for custom components with defined interfaces, and for nodes and components that require Content Meta-Data.All of the attributes listed in Content Meta-Data can be set as fields in a Content node. However, when creating a Content node, the fields themselves are not created until the valid attributes are set as fields, using either assignment (=), or set using setField() or setFields().Creating ContentNode NodesTo create a ContentNode node object and populate it with data, you can define the ContentNode node in XML markup, or create it using BrightScript. In both cases, you will usually be first creating or defining a parent ContentNode node, then creating or defining children ContentNode nodes below the parent, with possibly other levels of children ContentNode nodes.As an example, to define a ContentNode node with one level of children ContentNode nodes, you should generally:&lt;ContentNode role= or id= &gt;   &lt;ContentNode content_meta-data_attribute = "attribute" ... /&gt;   ... &lt;/ContentNode&gt;The parent ContentNode node is defined with either a role or an id field, depending on how you want to assign or use the content data. For the nodes classes that have a content field that is to be assigned a ContentNode node, such as LabelList nodes, the parent ContentNode node should be defined as a child node of the node:&lt;LabelList  id = "labellist" &gt;   &lt;ContentNode  role = "content" &gt;     &lt;ContentNode title = "Renderable Nodes" description = "Basic Nodes That Show Things" /&gt;     &lt;ContentNode title = "Z-Order/Parent-Child" description = "Scene Graph Tree Order Matters" /&gt;     &lt;ContentNode title = "Animations" description = "Moving Stuff Around and Flashing Lights" /&gt;     &lt;ContentNode title = "Events and Observers" description = "Reacting When Stuff Happens" /&gt;   &lt;/ContentNode&gt; &lt;/LabelList&gt;In other cases, you can just use the id field to allow you to access the ContentNode node later as an object for any purpose. In both cases, define additional ContentNode nodes with content fields as children of the parent ContentNode node.To create a ContentNode node in BrightScript, you should generally:Create the ContentNode node object using createObject() Create child ContentNode node objects using createChild() Assign the data to the field(s) of each ContentNode child objectAs follows:ContentNode_object = createObject("RoSGNode","ContentNode") ContentNode_child_object = ContentNode_object.createChild("ContentNode") ContentNode_child_object.field_name = data ... Assigning ContentNode Node Data To Nodes/ComponentsFor nodes and components that require a ContentNode node as the specification of their content field, you can define it as a child of the node or component in XML markup using the role field, or just assign the ContentNode node object to the content field as follows:  NodeComponent.content = ContentNode_objectFor other nodes and components that don't require a ContentNode node, you can use getChild() or a similar function to locate the specific child ContentNode node object that contains the data you want to assign to a particular node/component field:  ContentNode_child_object = ContentNode_object.getChild(child_number)   NodeComponent.field_name = ContentNode_child_object.field_name&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/ContentNode"&gt;https://sdkdocs.roku.com/display/sdkdoc/ContentNode&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Font">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Node&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The Font node class specifies the font to be used by a Label node, or any other nodes that render text.Nodes that use fonts include a field that stores a Font node. The font to use is specified by creating a Font node, and setting its uri and size fields.The uri field can be set to any TrueType/OpenType font file. For example, to specify a font in XML markup:&lt;Label&gt; &lt;Font role="font" uri="pkg:/fonts/font.ttf" size="24" /&gt; &lt;/Label&gt;A default system font can also be specified, such as in the following:&lt;Label id="myLabel" width="200" height="200" text="Hello Label" font="font:MediumBoldSystemFont" /&gt; The font can also be specified in BrightScript, for example:label = CreateObject("roSGNode", "Label") font = CreateObject("roSGNode", "Font") font.uri = "pkg:/fonts/font.ttf" font.size = 24 label.font = font&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Font"&gt;https://sdkdocs.roku.com/display/sdkdoc/Font&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="uri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a TrueType or OpenType font file. Currently only font files included in the application can be specified.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1" name="size" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the size of the font in points.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="PanelSet">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The PanelSet node provides the panel sliding behavior seen in the Roku home screen. The PanelSet node manages the position of a set of child Panel nodes, and implements the left and right panel sliding behavior. Once a Panel node has been added to a PanelSet node, it remains a child of the PanelSet node unless it is replaced by another Panel node, or slides completely off the right side of the screen.The PanelSet node is designed to display two Panel nodes in most cases, one Panel node on the left and one on the right. When the PanelSet node has focus, and the user presses the Left or Right remote control key, the panels slide to the left or right one position.For example, suppose the PanelSet node has two Panel nodes as children, panel A and panel B. When the user presses the Left key, a new panel, panel C, should be created and added as a child of the the PanelSet node. Adding a panel as a child of the PanelSet node causes all the panels to slide left one position, so that panel A is now offscreen to the left, panel B is in the left position, and panel C is in the right position. If the user presses the Left key again, a new panel, panel D, should be created and added as a child node of the PanelSet node. Adding panel D causes the panels to slide left again so that panels A and B are offscreen to the left, panel C is in the left position, and panel D is in the right position.At this point, if the user presses the Right key, the panels will slide one position to the right, so panel D will slide offscreen to the right, panel C will slide to the right position, and panel B will slide to the left position (panel A is still offscreen to the left). When the sliding animation ends, since panel D is offscreen to the right, it is automatically removed as a child node of the PanelSet node.Panel LayoutFor consistency, it is recommended that panels be set to the default height. Similarly, panels should be set to one of four default width sizes. For each panel width, the default defines a corresponding left position for the panel. This is summarized in the table below, along with the default values for each of these fields:Panel Field Panel Size SD Value HD Value height all 403 605 width narrow 218 388   medium 292 520   wide 363 645   full 520 940 leftPosition narrow 60 105   medium 60 105   wide 63 112   full 100 170Narrow panels should be paired with wide panels, so that both panels fit in the alloted region without overlapping the PanelSet node previous and next arrow indicators. Similarly, medium panels should be paired with medium panels. Only one full-screen width panel can be displayed at a time, so full-screen panels cause both left and right panels to slide on/offscreen when they are added to the PanelSet node.When two panels are onscreen, a default gap is added between the left and right panels. For SD, the spacing is set to 20 pixels. For HD, the spacing is 30 pixels. The PanelSet node positions the left panel so that the panel origin is at (leftPosition, 0) in the PanelSet node coordinate system, where leftPosition is the value of the left Panel node leftPosition field. The PanelSet node positions the right panel so that the panel origin is at (leftPosition  leftWidth + spacing), where leftPosition and leftWidth are the left panel leftPosition and width fields, and spacing is the default horizontal spacing attribute.Note that the PanelSet node positions the origin of each Panel node coordinate system by setting the Panel node translation field, but it does not clip the panel to the rectangle defined by the Panel node width and height fields, so if the Panel node contains a child node with translation set to (-10, -5), that child will be rendered 10 pixels to the right and 5 pixels above the panel origin.Child ManagementThe regular roSGNode child management interface, ifSGNodeChildren , is used for adding panels to the PanelSet node. Since adding children to the PanelSet node can trigger the panels to slide left, care must be taken to use those functions in the expected manner.Typically, the first panel is created, the panel focusedChild field has an observer added, then the panel is added to the PanelSet node with appendChild(). Then focus is set on that panel, causing the focusedChild observer function to be called. The focusedChild observer function typically will create the second panel, add a focusedChild observer on that panel, then add the second panel to the PanelSet node with appendChild(), and so forth.If any panel contains a list or grid, the typical usage is that when the list or grid panel is on the left, each list/grid item creates a different panel on the right. Typically, the list or grid itemUnfocused and itemFocused fields are observed. When the itemUnfocused field changes, the list or grid panel will hide the panel on the right, then when the itemFocused field changes, it will create a new panel for the newly focused list or grid item, and call replaceChild() to cause the old panel to be replaced by the new one.The PanelSet node assumes that:Only Panel nodes are added as PanelSet node children Panels are added only using the appendChild() or createChild() roSGNode functions. The Panel node leftPosition field must be set prior to calling appendChild() or createChild(). Appending a child will trigger a PanelSet node slide action in most cases. Panels can be replaced using the replaceChild() roSGNode function. Panel children should never be removed from the PanelSet node using the removeChild() roSGNode function. The PanelSet node automatically removes Panel node children when they slide offscreen to the right. The insertChild() and removeChild() roSGNode functions are never used.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/PanelSet"&gt;https://sdkdocs.roku.com/display/sdkdoc/PanelSet&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1280" name="width" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width of the PanelSet node. In most cases, this is set to the display width (such as 1280 for HD).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="605" name="height" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the PanelSet node. In most cases, this is set to the the display height minus the overhang height.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="500" name="slideDuration" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Milliseconds of the slide transition. The default is 1/2 second.  </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="GridPanel">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Panel&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The GridPanel node class allows you to easily create a Panel that adheres to the Roku layout and behavior for panels that contain a PosterGrid or MarkupGrid node. The GridPanel node class provides the following functionality:Resolution appropriate positioning and sizing of the grid node Automatic key focus handling (i.e. the grid node is set to receive key events when the GridPanel is given the key focus by the PanelSet) Left-justified and right-justified labels that can be used to provide descriptive information about the grid (e.g. "1 of N", etc.). These labels are automatically positioned and sized appropriately. Simple mechanism for setting up the case where focusing any item in the grid triggers the creation of a new panel to add to the PanelSet Default fade in/out animation of the next panel when the simple mechanism is used Default fade out mask effect applied to the grid items at the bottom of the panelAutomatic Create Next Panel FunctionalityOne key feature of the GridPanel node is providing a simple mechanism for setting up the common use case where each time a new item in the list receives the focus, a new "next" panel is added to the PanelSet. This mechanism is enabled or disabled by setting the createNextPanelOnItemFocus field to true or false.createNextPanelOnItemFocus should be set to true when a new right panel should be displayed each time the grid's focused item changes. For example, in the Roku Homescreen, when you navigate up/down/left/right in Streaming Channels grid, a new right panel is displayed that contains information about the currently focused grid item. createNextPanelOnItemFocus should be set to false when the right panel should not change in response to the grid's focus changes. For example, when focus is on the installed channels grid in the Roku Homescreen, the right panel always displays an ad panel, regardless of which item is focused in the grid.When the create next panel mechanism is enabled and the user presses a navigation arrow key, the panel to the right of the GridPanel smoothly fades out, then when the user releases the arrow key, a new right panel is created, added to the PanelSet and smoothly faded in. To implement this, the GridPanel automatically triggers the fade out of the right panel when the navigation arrow key is pressed. When the arrow key is released, the GridPanel will set the createNextPanelIndex field to the index into the grid's content that corresponds to the newly focused grid item. In response to the createNextPanelIndex field being set, the GridPanel's control logic must be written to immediately create the Panel node for the new right panel and set the nextPanel field to that Panel. The Panel creation must occur in the main scene graph render thread.The createNextPanelIndex field is guaranteed to be set exactly once whenever a new right panel needs to be created and populated with the data that corresponds to the specified index. This may happen when the GridPanel's data is changed, in response to up or down arrow key releases, or when the PanelSet's moves the focus onto the GridPanel from the left.For efficiency, sometimes the control logic for the GridPanel may create and hold onto Panel pointers internally so that the next Panel does not have to be newly created each the createNextPanelIndex field is set. If this is done, it is important to never reuse the current Panel node, as that Panel may still be fading out when the new next Panel needs to be created. A typical use case, where all the right Panels are identical other than the data they display, is to create a single pair of Panel nodes and alternate between them each time the createNextPanelIndex field is set, updating the panel data based on the specified list index.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/GridPanel"&gt;https://sdkdocs.roku.com/display/sdkdoc/GridPanel&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="narrow" name="panelSize">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only  Specifies one of the default panel sizes. Setting the field causes the width and leftPosition fields to be set to values that match the SDK2 preferred layout for a panel of the specified size. Value Meaning narrow Set the width and leftPosition fields to the values for a narrow Panel medium Set the width and leftPosition fields to the values for a medium width Panel wide Set the width and leftPosition fields to the values for a wide Panel full Set the width and leftPosition fields to the values for a full width Panel Note that PanelSet usage mandates that whenever two Panels are visible, they should include either one narrow and one wide panel or two medium width panels. If one Panel is visible, it's panelSize should be set to "full".</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="narrow">
                                        <xs:annotation>
                                            <xs:documentation>Set the width and leftPosition fields to the values for a narrow Panel</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="medium">
                                        <xs:annotation>
                                            <xs:documentation>Set the width and leftPosition fields to the values for a medium width Panel</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="wide">
                                        <xs:annotation>
                                            <xs:documentation>Set the width and leftPosition fields to the values for a wide Panel</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="full">
                                        <xs:annotation>
                                            <xs:documentation>Set the width and leftPosition fields to the values for a full width Panel</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="388" name="width" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width of the panel in pixels. In most cases, this should be set by setting the panelSize field to one of the pre-configured settings.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="-1" name="height" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the panel. In most cases, this will be set by the PanelSet and should treated as a read-only value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="105" name="leftPosition" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the horizontal position of the panel relative to the left edge of the PanelSet (which is a the left edge of the display by default). In most cases, this should be set by setting the panelSize field to one of the pre-configure settings.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="overhangTitle" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When the panel is used as part of the OverhangPanelSetScene, setting the overhangTitle field will cause that text to be displayed as the title in the overhang when the panel slides into the left position of the PanelSet.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="clockText" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When the panel is used as part of the OverhangPanelSetScene, setting the clockText field will cause that text to be displayed instead of the clock in the overhang when the panel slides into the left position of the PanelSet.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="optionsAvailable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When the panel is used as part of the OverhangPanelSetScene, setting optionsAvailable will enable/disable the options button handling when the panel slides into the left position of the PanelSet. The overhang's options prompt will change appearance to provide feedback to the user that the options button is enabled/disabled.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="leftOrientation" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When the panel is used as part of the OverhangPanelSetScene, leftOrientation will be set to true when the panel moves into the left position of the PanelSet and set to false when the panel moves into the right position of the PanelSet.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="leftOnly" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The leftOnly field provides information to the PanelSet that this Panel should never appear in the right position of the PanelSet. When the panel slides into the right position, the PanelSet initiates another slide in the same direction so that the panel does not end up on the right.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="hasNextPanel" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The hasNextPanel field provides information to the PanelSet as to whether or not this panel has another panel to its right. If set to true, the PanelSet's right arrow indicator is displayed and pressing the right arrow button on the remote triggers the PanelSet to move the focus one panel to the right, sliding the Panels as needed to make sure the panel that has the focus ends up onscreen. If set to false, the PanelSet's right arrow indicator is not displayed and the right arrow button does not trigger any change to the focused panel.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="isFullScreen" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The isFullScreen field indicates that this panel should be the only panel displayed (i.e. it will take up both the left and right positions in the PanelSet.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1" name="goBackCount" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Setting goBackCount field to a value greater than 1 causes the PanelSet to move the focus back that many panels when the user presses the left arrow button, sliding the Panels as needed to make sure the panel that has the focus ends up onscreen.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="isBackEnabled" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The isBackEnabled field provides information to the PanelSet as to whether or not this panel has another panel to its left. If set to true, the PanelSet's left arrow indicator is displayed and pressing the left arrow button on the remote triggers the PanelSet to move the focus "goBackCount" panels to the left, sliding the Panels as needed to make sure the panel that has the focus ends up onscreen. If set to false, the PanelSet's left arrow indicator is not displayed and the left arrow button does not trigger any change to the focused panel.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="selectButtonMovesPanelForward" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set to true, pressing the OK/Select button on the remote control causes the PanelSet focus to move to the next panel.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="isOffscreenLeft" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;This field is set by the PanelSet to indicate that the panel is positioned offscreen of the left edge of the PanelSet. This field is often observed to cancel outstanding load requests for images that are displayed on the panel.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="NULL" name="grid" type="Node">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The grid field should be set to either a PosterGrid or MarkupGrid node to be displayed in the Panel. In general, because the layout of any grid is usually custom, you will generally need to set the grid's itemSize, itemSpacing, numRows and numColumns fields. The GridPanel will position the grid appropriately.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="Label node" name="leftLabel" type="Node">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The leftLabel field is set to a Label node that is positioned just above the left/top corner of the grid. Setting the Label node's text field will cause that text string to be displayed. Setting other fields of the Label node can be used to adjust the Label's text color and other visual attributes.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="Label node" name="rightLabel" type="Node">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The rightLabel field is set to a Label node that is positioned just above the right/top corner of the grid. Setting the Label node's text field will cause that text string to be displayed. Setting other fields of the Label node can be used to adjust the Label's text color and other visual attributes. The rightLabel is often used to display a "1 of N" message that reflects the index of the grid's focused item.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="showSectionLabels" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If showSectionLabels is set to true and the data for the grid node is divided into sections, the Title attribute of the current section will be displayed as the leftLabel of the grid. As the grid items scroll, the leftLabel will smoothly transition as each section of the grid reaches the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="nextPanel" type="Node">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-only When the createNextPanlOnItemFocus field is true, the nextPanel field should be set to a Panel node to the next panel to add to the PanelSet in response to the createNextPanelIndex field being set. It must be set immediately in repsonse to the createNextPanelIndex field being set.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="createNextPanelOnItemFocus" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set to true, the Create Next Panel mechanism is enabled (i.e. the createNextPanelIndex field will be set when a new grid item receives the focus). When set to false, the Create Next Panel mechanism is disabled (i.e. the createNextPanelIndex field will not be set when a new grid item receives the focus).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="MarkupGrid">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;ArrayGrid&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The MarkupGrid node class is a  is a generic grid class that can be used to display a set of items arranged into a 2D grid. The contents of each grid item is an instance of an XML component specified by the itemComponentName field. An instance of the XML component is used to display the data for each item in the grid data model. The appearance of the grid item as it enters/exits the grid focus position can be customized using scripting.  is a sample channel containing a MarkupGrid where each item is an instance of an XML component. See the section MarkupGrid XML Component for details.The number of columns in the MarkupGrid node is fixed and the number of rows varies as needed to display all of the items in the grid data model. The items in the grid fill each row from left to right, then top to bottom. For example, if the grid data contains 8 items and the number of columns is set to 3, then items 1, 2 and 3 will be in the first row. Items 4, 5 and 6 will be in the second row. The third row will contain items 7 and 8 in the leftmost two columns and blank space in the right column.The layout of rows and columns in the grid is very flexible. Possible layouts include:a simple layout with all items in the grid having the same size a layout with the items in some rows having varying heights and/or the items in some columns having varying widths a layout with varying width rows and columns and items that occupy one or more rows and columnsThe grid items can be organized into sections that are demarcated by labelled horizontal divider lines between the sections.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/MarkupGrid"&gt;https://sdkdocs.roku.com/display/sdkdoc/MarkupGrid&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusRow" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the row that will have fixed focus if the vertFocusAnimationStyle field value is set to fixedFocusWrap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusColumn" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the column that will have fixed focus for grids if the horizFocusAnimationStyle field value is set to fixedFocusWrap. This field is not used for lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="horizFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a row of grid items in response to the remote direction pad Left and Right key presses. This field is not used for lists. The possible values are: Option Effect floatingFocus Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible. fixedFocusWrap Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="vertFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a list or a column of grid items in response to the remote direction pad Up and Down key presses. The possible values are: Option Effect floatingFocus Causes the focus indicator to float up or down until it reaches the end of the list or grid column, at which point the focus indicator will stay fixed on the first or last item in the list or grid column, and the items will scroll up or down if there are items that were not visible. fixedFocusWrap Causes the column to wrap around when the focus indicator reaches the first or last item in the list or grid column, as long as the list or grid column contains enough items to fill the list or grid column. If the list or grid column does not contain enough items to fill the list or grid column, the focus indicator will float up and down. fixedFocus Causes the focus to stay fixed on the upper leftmost item. As the user scrolls down, the row containing the previously selected item scrolls up off screen. Scrolling continues until the last row is reached.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float up or down until it reaches the end of the list or grid column, at which point the focus indicator will stay fixed on the first or last item in the list or grid column, and the items will scroll up or down if there are items that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the column to wrap around when the focus indicator reaches the first or last item in the list or grid column, as long as the list or grid column contains enough items to fill the list or grid column. If the list or grid column does not contain enough items to fill the list or grid column, the focus indicator will float up and down.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus to stay fixed on the upper leftmost item. As the user scrolls down, the row containing the previously selected item scrolls up off screen. Scrolling continues until the last row is reached.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0" name="wrapDividerWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the vertFocusAnimationStyle field value is set to fixedFocusWrap, specifies the width of a bitmap used as a visual divider between the last and first list or grid items when the list or grid wraps. Only set this field to use a value with a different appearance than the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1" name="numRenderPasses" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of rendering operations to display a complex list or grid. This allows you to achieve a performance increase by specifying that individual sub-elements of the list or grid items occur on sequential rendering operations, rather than all of the item sub-elements being rendered in one rendering operation, which is the default. If you set this field to a value greater than 1, you must specify the rendering operation number for each of the item sub-elements as the renderPass field value for that sub-element. No sub-element that has a renderPass field value of 0 (the default), or has a renderPass field value greater than the value of the numRenderPasses field, will render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="sectionDividerWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, specifies the width of the section divider bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="itemClippingRect" type="rect2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a clipping region for the list or grid items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="itemComponentName" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the name of a XML component for the grid items. An instance of this component is created on demand for each visible item of the grid. The XML component must define a specific interface as detailed in MarkupGrid XML Component below.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="content" type="ContentNode">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the content for the list. See Data Bindings below for more details. If the data contains section markers, section dividers are drawn between each section. These section dividers may contain an icon and/or a string. </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="itemSize" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width and height of the default size for the grid items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="useAtlas" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Enables a performance optimization when most of the poster items displayed in the grid have the same size. The field value toggles the use of a texture atlas that stores the posters in the grid. The default is true, since in many cases, most of the posters in the grid have the same size as determined by the basePosterSize field value. In this case, using the texture atlas can provide a rendering performance benefit. For grids that have more complicated layouts, that include several posters that have sizes that differ from the value of basePosterSize, or for grids where there are only a few large posters (about five to eight, or posters that are about a quarter of the screen height or width) displayed at the same time, it is best for this field to be set to false.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="itemSpacing" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;A vector specifying the horizontal spacing between columns, and the vertical spacing between rows in the grid.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="numColumns" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of columns in the grid</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="numRows" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of visible rows in the grid. Note that the actual number of rows may be more or less than the number of visible rows depending on the number of items in the grid content.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="rowHeights" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the heights of the poster for each row of the grid, allowing the height of each row of the grid to vary from row to row. The values set override the height specified as the y-dimension value of the basePosterSize field. If the array contains fewer elements than the number of rows needed to display all the items in the grid, the y-dimension value of the basePosterSize field is used as the height of the extra rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="columnWidths" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the widths of the component for each column of the grid. This allows the width of each column of the grid to vary from column to column. The values override the width specified in the x-dimension value of the basePosterSize field. If the array contains fewer elements than the number of columns specified by the value of the numColumns field, the x-dimension value of the basePosterSize field is used as the width of the extra columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="rowSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the spacing after each row of the grid. This allows the spacing between rows to vary from row to row. The values override the vertical spacing specified in the y-dimension value of the itemSpacing field. If the array contains fewer elements than the number of rows needed to display all the items in the grid, the y-dimension value of the itemSpacing field is used as the spacing after the extra rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="columnSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the spacing after each column of the grid. This allows the spacing between columns to vary from column to column. The values override the horizontal spacing specified in the x-dimension value of the itemSpacing field. If the array contains fewer elements than the number of columns specified by the value of the numColumns field, the x-dimension value of the itemSpacing field is used as the spacing after the extra columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="fixedLayout" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If set to false, each item in the grid data model is assigned to sequential cells in the grid (or the section if the data model includes section information). The data models use the X, Y, W, and H ContentNode attributes to specify which cells of the grid each item should occupy, where X is the column number, Y is the row number, W is the number of columns the item occupies, and H is the number of rows the item occupies. The field value should only be set to true for cases where one or more items in the grid should span multiple rows or columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="imageWellBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use to suggest where images would appear for empty grids and empty sections of grids. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="drawFocusFeedback" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether or not the focus indicator bitmap is displayed</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="drawFocusFeedbackOnTop" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether the focus indicator bitmap is drawn below or on top of the grid items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file used for the focus indicator when the grid has focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusFootprintBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file used for the focus indicator when the list does not have focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="focusBitmapBlendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Blend the graphic image specified by focusBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by focusBitmapUri.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="focusFootprintBlendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Blend the graphic image specified by focusFootprintBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus footprint indicator graphic image with a different color than the image specified by focusFootprintBitmapUri.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="wrapDividerBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use as a visual separator between the last and first grid items when the grid wraps. In most case, this should be a 9-patch image that specifies both expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="36" name="wrapDividerHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the divider. The wrap divider bitmap, a visual separator between the last and first grid items when the grid wraps, will be scaled to this height. The width of the wrap divider is set to the width of the grid items (such as the x-dimension value of the basePosterSize field).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="sectionDividerBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use as visual separator between sections of the grid. The section dividers can include an icon and a label in addition to the section divider bitmap. For sections that do not contain an icon or a title, the wrap divider bitmap is used for the section dividers instead. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="sectionDividerFont" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for section divider labels</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="sectionDividerTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color for section divider labels</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="10" name="sectionDividerSpacing" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the spacing between the items appearing in the section divider (such as the spacing between the section divider icon, the section divider label, and the section divider bitmap). Note the section divider does not always include an icon and/or a title.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="46" name="sectionDividerHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the section dividers. The width of the section dividers is determined by the width of the list items (such as x-dimension value of the basePosterSize field) and the sectionDividerLeftOffset field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="117" name="sectionDividerMinWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the minimum width of the section divider bitmap. The section divider label will be ellipsized if necessary in order to ensure that the section divider bitmap meets the minimum width.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="sectionDividerLeftOffset" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Number of pixels to offset the left edge of the section divider relative to the left edge of the grid items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="jumpToItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid item index, causes the list to immediately update so that the specified index moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="animateToItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid item index, causes the list to quickly scroll so that the specified index moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="MaskGroup">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The MaskGroup node class allows an alpha mask bitmap to be applied to the rendering of its children. This allows effects such as having a list fade out at the bottom to be easily created.MaskGroup nodes do not work on all Roku players (specifically, MaskGroup nodes only work on players that support OpenGL). On players whose graphics do not support OpenGL, a MaskGroup node just renders its children without applying the extra alpha mask.Unlike other bitmaps, the MaskGroup node class does not work with 9-patch images. If the bitmap size does not match the group bounding rectangle, the edge rows of the mask are repeated as needed.For example, suppose the MaskGroup node bounding rectangle has an origin at (0, 0), a width of 150 and a height of 80. If the mask bitmap were also 150 by 80, and the maskOffset and maskSize field values were left at their default values of [ 0, 0 ], then each pixel of the mask bitmap would be applied to the corresponding pixel of the MaskGroup node bounding rectangle. The figure below illustrates that case. On the right is a MaskGroup node that contains a Poster node. In the center is an alpha bitmap with the same size as the Poster node. On the right is the result of rendering the MaskGroup node with the image in the center used as a mask. The maskSize and maskOffset field values can be used to scale and offset the mask bitmap relative to the group coordinate system, as shown in the figure below. The mask is the same bitmap as in the figure above. In the below figure, the maskOffset field value has been set to (50, 30), offsetting the origin of the mask bitmap coordinate system relative to the origin of the MaskGroup node coordinate system 50 pixels to the left and 30 pixels down.The maskSize field value has been set to (100, 50), This causes the width of the mask bitmap to be scaled from 150 to 100, and the height of the mask bitmap to be scaled from 80 to 50, so that the mask right edge aligns with the right edge of the MaskGroup node bounding rectangle, and the mask bottom edge aligns with the bottom edge of the MaskGroup node bounding rectangle. The center of the figure shows the mask with the maskOffset and maskSize field values applied overlaid on top of the MaskGroup node. The right side of the figure shows the result of applying the mask to the MaskGroup node. Notice that the left column of pixels in the mask is used as the mask for all columns of the MaskGroup node that lie to the left of the mask, causing those columns to be rendered with full opacity. Similarly, and the top row of the mask is used as the mask for all rows of the MaskGroup node that lie above the mask, causing each of the rows to fade out on the right.  As shown in above, the transformed mask may not overlay all the rendered pixels of the MaskGroup node. In that case, the leftmost (rightmost) columns of the mask bitmap are used as the mask for any MaskGroup node pixels that are to the left (right) of the transformed mask. The top (bottom) row of the mask bitmap is used as the mask for MaskGroup node pixels that are above (below) the transformed mask.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/MaskGroup"&gt;https://sdkdocs.roku.com/display/sdkdoc/MaskGroup&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="maskUri" type="URI_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap to use for the group alpha mask. The alpha value of each pixel rendered in the group is multiplied by the value of a pixel in the alpha mask. The mapping from pixel coordinates in the group to mask pixel coordinates is controlled by the maskSize and maskOffset field values. Those fields define a coordinate system for the mask bitmap relative to the group coordinate system. This mask coordinate system is used to map mask pixels to their corresponding pixels in the MaskGroup node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ 0, 0 ]" name="maskSize" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a scaling factor of the alpha mask coordinate system relative to the group coordinate system. If either element of the maskSize field value does not match the corresponding size of the mask bitmap, the mask bitmap is scaled to the specified size in the dimension. Setting either element of the maskSize field vector to 0 causes the mask bitmap to be used at its actual size in that dimension.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0, 0 ]" name="maskOffset" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies an offset of the mask coordinate system relative to the group coordinate system. For example, if the maskOffset field value is set to [ 100, 0 ], then mask pixel [0, 0] is used as the alpha value for pixels rendered for the MaskGroup node coordinate [100, 0].</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Keyboard">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The Keyboard node class allows a user to enter a string of alphanumeric characters. The string entered is displayed in a TextEditBox node that is part of the Keyboard node.The Keyboard node must have the key focus in order to work properly. By default, a Keyboard node toggles between uppercase and lowercase letters when the Options remote key is pressed, to speed the entry of mixed-case strings by the user. It is important not to override this behavior, particularly if a Keyboard node is used as an internal node for a KeyboardDialog node.The default appearance of a Keyboard node is very transparent, allowing the keyboard to pick up most of its color from what is rendered underneath it. The appearance can be customized by changing the keyboardBitmapUri and other fields.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Keyboard"&gt;https://sdkdocs.roku.com/display/sdkdoc/Keyboard&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="text" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Contains the string of characters that has been entered</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xffffffff" name="keyColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the key labels and icons when the Keyboard node does not have the focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xffffffff" name="focusedKeyColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the color of the key labels and icons when the Keyboard node has the focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="keyboardBitmapUri" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of an image file to be loaded to replace the default keyboard image drawn underneath the key label and icons. Note that this image must be carefully designed so that the key positions match the default image. Template images for SD, HD and FHD resolutions are provided below.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusBitmapUri" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the URI of an image file to be loaded to replace the keyboard focus indicator. This should be a 9-patch image so that it can be stretched to the appropriate size for the double width keys.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="showTextEditBox" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether or not the Keyboard node internal TextEditBox node is displayed. In most cases, it is desirable to display the TextEditBox node so that the user can see the string as it is entered. In some cases though, you might want to show only the keyboard part of the Keyboard node. In those cases, the text field of the node will still contain the string entered by the user, so it can displayed in some different manner.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="SequentialAnimation">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;AnimationBase&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The SequentialAnimation node class allows you to specify that a set of animations should occur sequentially. The children of the SequentialAnimation node specify the set of animations to be executed. Note that the use of the delay field in the child animations allows a delay between any two animations to be specified, if desired.The state field is set to running when any of the child animations is in progress. Once all the animations have run to completion, the state field is set to stopped. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/SequentialAnimation"&gt;https://sdkdocs.roku.com/display/sdkdoc/SequentialAnimation&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="control">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls the animation. Supported options include: Option Effect none Initial state with no associated action start Always plays the animation from the beginning stop Stops the animation in its current state pause Pauses the animation in its current state resume If paused, resumes the animation from its current state. If the animation is not paused, plays the animation from the beginning. finish Jumps to the end of the animation, then stops. All animated fields will be immediately set to their final values as if the animation had completed.  </xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="none">
                                        <xs:annotation>
                                            <xs:documentation>Initial state with no associated action</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="start">
                                        <xs:annotation>
                                            <xs:documentation>Always plays the animation from the beginning</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="stop">
                                        <xs:annotation>
                                            <xs:documentation>Stops the animation in its current state</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="pause">
                                        <xs:annotation>
                                            <xs:documentation>Pauses the animation in its current state</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="resume">
                                        <xs:annotation>
                                            <xs:documentation>If paused, resumes the animation from its current state. If the animation is not paused, plays the animation from the beginning.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="finish">
                                        <xs:annotation>
                                            <xs:documentation>Jumps to the end of the animation, then stops. All animated fields will be immediately set to their final values as if the animation had completed.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="false" name="repeat" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls whether the animation stops when it finishes (false) or repeats from the beginning (true)</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="delay" type="time">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Delays the start of the animation by the specified number of seconds</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Panel">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Group&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The Panel node is used to create sliding panels for channel UI, similar to those in the Roku OS home screen,&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Panel"&gt;https://sdkdocs.roku.com/display/sdkdoc/Panel&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="narrow" name="panelSize">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only  Specifies one of the default panel sizes. Setting the field causes the width and leftPosition fields to be set to values that match the SDK2 preferred layout for a panel of the specified size. Value Meaning narrow Set the width and leftPosition fields to the values for a narrow Panel medium Set the width and leftPosition fields to the values for a medium width Panel wide Set the width and leftPosition fields to the values for a wide Panel full Set the width and leftPosition fields to the values for a full width Panel Note that PanelSet usage mandates that whenever two Panels are visible, they should include either one narrow and one wide panel or two medium width panels. If one Panel is visible, it's panelSize should be set to "full".</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="narrow">
                                        <xs:annotation>
                                            <xs:documentation>Set the width and leftPosition fields to the values for a narrow Panel</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="medium">
                                        <xs:annotation>
                                            <xs:documentation>Set the width and leftPosition fields to the values for a medium width Panel</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="wide">
                                        <xs:annotation>
                                            <xs:documentation>Set the width and leftPosition fields to the values for a wide Panel</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="full">
                                        <xs:annotation>
                                            <xs:documentation>Set the width and leftPosition fields to the values for a full width Panel</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="388" name="width" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width of the panel in pixels. In most cases, this should be set by setting the panelSize field to one of the pre-configured settings.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="-1" name="height" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the panel. In most cases, this will be set by the PanelSet and should treated as a read-only value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="105" name="leftPosition" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the horizontal position of the panel relative to the left edge of the PanelSet (which is a the left edge of the display by default). In most cases, this should be set by setting the panelSize field to one of the pre-configure settings.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="overhangTitle" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When the panel is used as part of the OverhangPanelSetScene, setting the overhangTitle field will cause that text to be displayed as the title in the overhang when the panel slides into the left position of the PanelSet.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="clockText" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When the panel is used as part of the OverhangPanelSetScene, setting the clockText field will cause that text to be displayed instead of the clock in the overhang when the panel slides into the left position of the PanelSet.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="optionsAvailable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When the panel is used as part of the OverhangPanelSetScene, setting optionsAvailable will enable/disable the options button handling when the panel slides into the left position of the PanelSet. The overhang's options prompt will change appearance to provide feedback to the user that the options button is enabled/disabled.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="leftOrientation" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When the panel is used as part of the OverhangPanelSetScene, leftOrientation will be set to true when the panel moves into the left position of the PanelSet and set to false when the panel moves into the right position of the PanelSet.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="leftOnly" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The leftOnly field provides information to the PanelSet that this Panel should never appear in the right position of the PanelSet. When the panel slides into the right position, the PanelSet initiates another slide in the same direction so that the panel does not end up on the right.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="hasNextPanel" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The hasNextPanel field provides information to the PanelSet as to whether or not this panel has another panel to its right. If set to true, the PanelSet's right arrow indicator is displayed and pressing the right arrow button on the remote triggers the PanelSet to move the focus one panel to the right, sliding the Panels as needed to make sure the panel that has the focus ends up onscreen. If set to false, the PanelSet's right arrow indicator is not displayed and the right arrow button does not trigger any change to the focused panel.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="isFullScreen" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The isFullScreen field indicates that this panel should be the only panel displayed (i.e. it will take up both the left and right positions in the PanelSet.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1" name="goBackCount" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Setting goBackCount field to a value greater than 1 causes the PanelSet to move the focus back that many panels when the user presses the left arrow button, sliding the Panels as needed to make sure the panel that has the focus ends up onscreen.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="isBackEnabled" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The isBackEnabled field provides information to the PanelSet as to whether or not this panel has another panel to its left. If set to true, the PanelSet's left arrow indicator is displayed and pressing the left arrow button on the remote triggers the PanelSet to move the focus "goBackCount" panels to the left, sliding the Panels as needed to make sure the panel that has the focus ends up onscreen. If set to false, the PanelSet's left arrow indicator is not displayed and the left arrow button does not trigger any change to the focused panel.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="selectButtonMovesPanelForward" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set to true, pressing the OK/Select button on the remote control causes the PanelSet focus to move to the next panel.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="isOffscreenLeft" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;This field is set by the PanelSet to indicate that the panel is positioned offscreen of the left edge of the PanelSet. This field is often observed to cancel outstanding load requests for images that are displayed on the panel.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Timer">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Node&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The Timer node class generates an observable event after a specified amount of time has elapsed.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Timer"&gt;https://sdkdocs.roku.com/display/sdkdoc/Timer&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="control">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used to control the operation of the Timer node. Recognized values include: Value Effect none No effect start Starts the Timer node operation stop Stops a running Timer node</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="none">
                                        <xs:annotation>
                                            <xs:documentation>No effect</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="start">
                                        <xs:annotation>
                                            <xs:documentation>Starts the Timer node operation</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="stop">
                                        <xs:annotation>
                                            <xs:documentation>Stops a running Timer node</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="false" name="repeat" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If set to true, the Timer node fires repeatedly, each time the specified duration field value elapses. If set to false, the Timer node only fires once until restarted.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1" name="duration" type="time">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the time in seconds before the Timer node fires after the control field value is set to start. To specify time values down to millisecond granularity, use a float type (0.001 equals one millisecond). </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="fire" type="Event">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Observe-Only Triggers observer callback functions when the Timer node fires.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="ButtonGroup">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;LayoutGroup&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The ButtonGroup node class manages the layout, visual attributes, and focus management of a vertical list of Button nodes. When the ButtonGroup node has focus, it sets the key focus on a single one of its child Button nodes.The buttons can be easily created using default button appearances by setting the buttons field to an array of strings containing the labels for each button.  A single observer can watch for any of the Button nodes in the group to be selected by observing the buttonSelected field. By default, Button nodes added to the group will have the default button appearance. Several fields exist that allow you to change an attribute of the appearance of all Button nodes in the group.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/ButtonGroup"&gt;https://sdkdocs.roku.com/display/sdkdoc/ButtonGroup&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="vert" name="layoutDirection">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls the layout direction. Value Use horiz Positions the children in a row from left to right vert Positions the children in a column from top to bottom</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="horiz">
                                        <xs:annotation>
                                            <xs:documentation>Positions the children in a row from left to right</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="vert">
                                        <xs:annotation>
                                            <xs:documentation>Positions the children in a column from top to bottom</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="left" name="horizAlignment">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the alignment point in the horizontal direction. The effect of the value set depends on the whether the layoutDirection field value is set to either horiz or vert. Value layoutDirection  Use left  vert Aligns the left edges of each child in the column, and sets the LayoutGroup node local x-coordinate origin at the left edge of the children horiz Sets the LayoutGroup node local x-coordinate origin at the left edge of the first child center  vert Aligns the centers of each child in the column, and sets the LayoutGroup node local x-coordinate origin at the center alignment point horiz Sets the LayoutGroup node local x-coordinate origin at the center of the horizontal row of children right  vert Aligns the right edges of each child in the column, and sets the LayoutGroup node local x-coordinate origin is at the right edge of the children horiz Sets the LayoutGroup node local x-coordinate origin at the right edge of the last child</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="left">
                                        <xs:annotation>
                                            <xs:documentation>Aligns the left edges of each child in the column, and sets the LayoutGroup node local x-coordinate origin at the left edge of the children - Sets the LayoutGroup node local x-coordinate origin at the left edge of the first child</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="center">
                                        <xs:annotation>
                                            <xs:documentation>Aligns the centers of each child in the column, and sets the LayoutGroup node local x-coordinate origin at the center alignment point - Sets the LayoutGroup node local x-coordinate origin at the center of the horizontal row of children</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="right">
                                        <xs:annotation>
                                            <xs:documentation>Aligns the right edges of each child in the column, and sets the LayoutGroup node local x-coordinate origin is at the right edge of the children - Sets the LayoutGroup node local x-coordinate origin at the right edge of the last child</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="top" name="vertAlignment">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the alignment point in the vertical direction. The effect of the value set depends on the whether the layoutDirection field value is set to either horiz or vert. Value layoutDirection  Use top  horiz Aligns the top edges of each child in the row, and sets the LayoutGroup node local y-coordinate origin at the top edge of the children vert Sets the LayoutGroup node local y-coordinate origin at the top edge of the first child center  horiz Aligns the centers of each child in the row, and sets the LayoutGroup node local y-coordinate origin at the center alignment point vert Sets the LayoutGroup node local y-coordinate origin at the center of the vertical column of children bottom  horiz Aligns the bottom edges of each child in the row, and sets the LayoutGroup node local y-coordinate origin at the bottom edge of the children vert Sets the LayoutGroup node local y-coordinate origin at the bottom edge of the last child</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="top">
                                        <xs:annotation>
                                            <xs:documentation>Aligns the top edges of each child in the row, and sets the LayoutGroup node local y-coordinate origin at the top edge of the children - Sets the LayoutGroup node local y-coordinate origin at the top edge of the first child</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="center">
                                        <xs:annotation>
                                            <xs:documentation>Aligns the centers of each child in the row, and sets the LayoutGroup node local y-coordinate origin at the center alignment point - Sets the LayoutGroup node local y-coordinate origin at the center of the vertical column of children</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="bottom">
                                        <xs:annotation>
                                            <xs:documentation>Aligns the bottom edges of each child in the row, and sets the LayoutGroup node local y-coordinate origin at the bottom edge of the children - Sets the LayoutGroup node local y-coordinate origin at the bottom edge of the last child</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="itemSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls the spacing before or after each child in the layout direction. By default, no space is added between the children. If the field value array is set with a single value, and the addItemSpacingAfterChild field value is set to true, that amount of space is inserted after each child is positioned. If the addItemSpacingAfterChild field value is set to false, the space is inserted before each child is positioned. If the field value array has more than one value, the first value specifies the spacing before or after the first item, the second value specifies the spacing before or after the second item, and so on. If there are fewer values in the field value array than needed, the final value is repeated as needed. If there are more values in the field value array than needed, the extra values are ignored.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="addItemSpacingAfterChild" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls how the spaces specified in the itemSpacings field are inserted. By default, the field value is set to true. This causes the specified spaces to be inserted after the child is positioned. If the field value is set to false, the specified item space is inserted before the child is positioned.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xffffffff" name="textColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the button label color for all unfocused Button nodes in the group. Only set to override the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xffffffff" name="focusedTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the button label color for the Button node that has focus, if any. Only set to override the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system: MediumSystemFont" name="textFont" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the Font node for all unfocused Button nodes in the group. Only set to override the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system: MediumBoldSystemFont" name="focusedTextFont" type="Font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the Font node for the Button node that has focus, if any. Only set to override the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap to be used as the background for the Button node that has focus. Only set to override the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusFootprintBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap to be used as the focus footprint background, when focus is not on the ButtonGroup node. The focus footprint is a visual indicator of the button that will take focus when focus moves back onto the ButtonGroup node. Only set to override the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="iconUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap for the button icon for all unfocused Button nodes in the group. Only set to override the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusedIconUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap for the focused button icon. Only set to override the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="minWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the minimum width for the Button nodes in the group. The minWidth field must be less than or equal to the maxWidth field. Only set to override the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="32767" name="maxWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When set, specifies the maximum width for the Button nodes in the group. The maxWidth field must be greater than or equal to the minWidth field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="buttonHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of each Button node in the group. Only set to override the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="rightJustify" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether the button labels and icons should be right- or left-justified. When right-justified and there is an icon, it appears to the right of the button label.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusButton" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only  Causes the button with the specified index to receive the focus when the ButtonGroup node has the key focus. Note that if the ButtonGroup node does not have the key focus when the focusButton field is set, the specified button will display the focus "footprint" as its background.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ ]" name="buttons" type="array_of_strings">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only Allows a set of Button nodes to be easily created by providing an array of button labels. Each string in the array will result in a Button node to be added to the ButtonGroup node, using the string as the button label.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Animation">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;AnimationBase&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The Animation node class provides animations of renderable nodes, by applying interpolator functions to the values in specified renderable node fields. For an animation to take effect, an Animation node definition must include a child field interpolator node (, , ) definition for each renderable node field that is animated.The Animation node class provides a simple linear interpolator function, where the animation takes place smoothly and simply from beginning to end. The Animation node class also provides several more complex interpolator functions to allow custom animation effects. For example, you can move a graphic image around the screen at differing speeds and curved trajectories at different times in the animation by specifying the appropriate function in the easeFunction field (quadratic and exponential are two examples of functions that can be specified). The interpolator functions are divided into two parts: the beginning of the animation (ease-in), and the end of the animation (ease-out). You can apply a specified interpolator function to either or both ease-in and ease-out, or specify no function for either or both (which is the linear function). You can also change the portion of the animation that is ease-in and ease-out to arbitrary fractional values for a quadratic interpolator function applied to both ease-in and ease-out.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Animation"&gt;https://sdkdocs.roku.com/display/sdkdoc/Animation&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="control">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls the animation. Supported options include: Option Effect none Initial state with no associated action start Always plays the animation from the beginning stop Stops the animation in its current state pause Pauses the animation in its current state resume If paused, resumes the animation from its current state. If the animation is not paused, plays the animation from the beginning. finish Jumps to the end of the animation, then stops. All animated fields will be immediately set to their final values as if the animation had completed.  </xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="none">
                                        <xs:annotation>
                                            <xs:documentation>Initial state with no associated action</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="start">
                                        <xs:annotation>
                                            <xs:documentation>Always plays the animation from the beginning</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="stop">
                                        <xs:annotation>
                                            <xs:documentation>Stops the animation in its current state</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="pause">
                                        <xs:annotation>
                                            <xs:documentation>Pauses the animation in its current state</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="resume">
                                        <xs:annotation>
                                            <xs:documentation>If paused, resumes the animation from its current state. If the animation is not paused, plays the animation from the beginning.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="finish">
                                        <xs:annotation>
                                            <xs:documentation>Jumps to the end of the animation, then stops. All animated fields will be immediately set to their final values as if the animation had completed.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="false" name="repeat" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Controls whether the animation stops when it finishes (false) or repeats from the beginning (true)</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="delay" type="time">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Delays the start of the animation by the specified number of seconds</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="duration" type="Time">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the duration of the animation in seconds.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="inOutCubic" name="easeFunction">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the interpolator function to be used for the animation. Value Ease-In/Ease-Out Function linear No ease-in or ease-out inQuad Quadratic ease-in function, no ease-out inCubic Cubic ease-in function, no ease-out inQuartic Quartic ease-in function, no ease-out inQuintic Quintic ease-in function, no ease-out inExpo Exponential ease-in function, no ease-out outQuad Quadratic ease-out function, no ease-in outCubic Cubic ease-out function, no ease-in outQuartic Quartic ease-out function, no ease-in outQuintic Quintic ease-out function, no ease-in outExpo Exponential ease-out function, no ease-in inOutQuad Quadratic ease-in and ease-out function inOutCubic Cubic ease-in and ease-out function inOutQuartic Quartic ease-in and ease-out function inOutQuintic Quintic ease-in and ease-out function inOutExpo Exponential ease-in and ease-out function piecewise Quadratic ease-in and ease-out function with extra control over the percentage of the duration during which ease-in and ease-out occurs. The extra control is specified using the easeInPercent and easeOutPercent fields.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="linear">
                                        <xs:annotation>
                                            <xs:documentation>No ease-in or ease-out</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="inQuad">
                                        <xs:annotation>
                                            <xs:documentation>Quadratic ease-in function, no ease-out</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="inCubic">
                                        <xs:annotation>
                                            <xs:documentation>Cubic ease-in function, no ease-out</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="inQuartic">
                                        <xs:annotation>
                                            <xs:documentation>Quartic ease-in function, no ease-out</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="inQuintic">
                                        <xs:annotation>
                                            <xs:documentation>Quintic ease-in function, no ease-out</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="inExpo">
                                        <xs:annotation>
                                            <xs:documentation>Exponential ease-in function, no ease-out</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="outQuad">
                                        <xs:annotation>
                                            <xs:documentation>Quadratic ease-out function, no ease-in</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="outCubic">
                                        <xs:annotation>
                                            <xs:documentation>Cubic ease-out function, no ease-in</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="outQuartic">
                                        <xs:annotation>
                                            <xs:documentation>Quartic ease-out function, no ease-in</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="outQuintic">
                                        <xs:annotation>
                                            <xs:documentation>Quintic ease-out function, no ease-in</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="outExpo">
                                        <xs:annotation>
                                            <xs:documentation>Exponential ease-out function, no ease-in</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="inOutQuad">
                                        <xs:annotation>
                                            <xs:documentation>Quadratic ease-in and ease-out function</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="inOutCubic">
                                        <xs:annotation>
                                            <xs:documentation>Cubic ease-in and ease-out function</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="inOutQuartic">
                                        <xs:annotation>
                                            <xs:documentation>Quartic ease-in and ease-out function</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="inOutQuintic">
                                        <xs:annotation>
                                            <xs:documentation>Quintic ease-in and ease-out function</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="inOutExpo">
                                        <xs:annotation>
                                            <xs:documentation>Exponential ease-in and ease-out function</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="piecewise">
                                        <xs:annotation>
                                            <xs:documentation>Quadratic ease-in and ease-out function with extra control over the percentage of the duration during which ease-in and ease-out occurs. The extra control is specified using the easeInPercent and easeOutPercent fields.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0.5" name="easeInPercent" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If easeFunction is set to piecewise, easeInPercent sets the percentage of the animation duration during which ease-in is applied. Note that the values of easeInPercent plus easeOutPercent must be less than or equal to 1.For all other values of easeFunction, easeInPercent is ignored.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.5" name="easeOutPercent" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If easeFunction is set to piecewise, easeOutPercent sets the percentage of the animation duration during which ease-out is applied. Note that the values of easeInPercent plus easeOutPercent must be less than or equal to 1. For all other values of easeFunction, easeOutPercent is ignored.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="ComponentLibrary">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Node&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The ComponentLibrary node class downloads a library of custom Scene Graph components to be used in an application. The ComponentLibrary node should be used in a Scene node, such as Scene or OverhangPanelSetScene. One way to ensure that the library downloads before the Scene Graph application begins to compile the components for the application, is to begin the download in the main.brs file that creates the Scene node, by adding an &lt;interface&gt; field to the Scene node that can be used to monitor the download, and starts the application when the download is complete.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/ComponentLibrary"&gt;https://sdkdocs.roku.com/display/sdkdoc/ComponentLibrary&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="no default" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Set to a unique ID for the library for the application</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="no default" name="uri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The URL of the library to be downloaded</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="Audio">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;Node&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The Audio node class plays streaming audio. It only can play mp3 files.The Audio node class has no built-in visual UI, but you can build your own UI for the node, including trick play, or showing an album cover or similar graphical image for each song selected by a user.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/Audio"&gt;https://sdkdocs.roku.com/display/sdkdoc/Audio&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="NULL" name="content" type="ContentNode">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the required and optional play parameters and descriptive  for the audio.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="control">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the desired play state for the audio, such as starting or stopping the audio play. Getting the value of this field returns the most recent value set, or none if no value has been set. In order to dynamically monitor the actual state of the audio, see the state field. Option Effect none No play state set  play Start audio play start Start audio play stop Stop audio play pause Pause audio play resume Resume audio play after a pause replay Replay audio</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="none">
                                        <xs:annotation>
                                            <xs:documentation>No play state set</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="play">
                                        <xs:annotation>
                                            <xs:documentation>Start audio play</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="start">
                                        <xs:annotation>
                                            <xs:documentation>Start audio play</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="stop">
                                        <xs:annotation>
                                            <xs:documentation>Stop audio play</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="pause">
                                        <xs:annotation>
                                            <xs:documentation>Pause audio play</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="resume">
                                        <xs:annotation>
                                            <xs:documentation>Resume audio play after a pause</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="replay">
                                        <xs:annotation>
                                            <xs:documentation>Replay audio</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0.5" name="notificationInterval" type="time">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The interval between notifications to observers of the position field, specified as the number of seconds. If the value is 0, no notifications are delivered. This value may be read or modified at any time.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="invalid" name="seek" type="time">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only Sets the current position in the audio. The value is the number seconds from the beginning of the stream, specified as a double.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
                <xs:element name="MarkupList">
                    <xs:annotation>
                        <xs:documentation>&lt;b&gt;Extends: &lt;/b&gt;ArrayGrid&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The MarkupList node class is a generic list class that can be used to display a list of items. The contents of each list item is an instance of an XML component specified by the itemComponentName field value. An instance of the XML component is used to display the data for each item in the list data model. The appearance of the list item as it enters/exits the list focus position can be customized using BrightScript.   is a sample channel containing a MarkupList where each item is an instance of an XML component. See the section MarkupList XML Component for details.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;More: &lt;/b&gt;&lt;a href="https://sdkdocs.roku.com/display/sdkdoc/MarkupList"&gt;https://sdkdocs.roku.com/display/sdkdoc/MarkupList&lt;/a&gt;</xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:group ref="allNodes"/>
                        <xs:attribute default="" name="id" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Adds a dictionary entry that allows the node to be retrieved with ifSGDictionary findNode() function</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="N/A" name="focusedChild" type="NA">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;When a node or one of its children gains or loses the keyboard focus, the focusedChild field will be set and call its observer functions. In the observer function, typically, you use ifSGNodeFocus functions to query whether this node or some other node has the key focus or is in the key focus chain. Accessing the value of the field will result in script errors.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="focusable" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Provides a hint as to whether or not this node can take the key focus</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="visible" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node and its children are rendered. If false, the node and its children do not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1.0" name="opacity" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Sets the opacity of the node and its children. Opacity is the opposite of transparency. Opacity values range from 0.0 (fully transparent) to 1.0 (fully opaque). As the scene graph is traversed, the opacity values are combined by multiplying the current accumulated opacity with the node opacity, so that if the accumulated opacity of a node ancestors is 0.25 (75% transparent), the node will have opacity of 0.25 or less. This allows entire branches of the scene graph to fade in and out by animating the opacity of the node at the root of the branch.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="translation" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the origin of the node local coordinate system relative to its parent node.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="rotation" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the rotation angle about the scaleRotateCenter point (in radians) of the node local coordinate system. Positive values specify a counterclockwise rotation, negative values specify a clockwise rotation. For some Roku Player hardware, only rotations of 0, 90, 180 and 270 degrees are supported.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[1.0,1.0]" name="scale" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Defines the scale factor to be applied to the node local coordinate</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0.0,0.0]" name="scaleRotateCenter" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Describes the location of a point in the node local coordinate that serves as the center of the scale and rotation operations</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="renderLast" name="childRenderOrder" type="option_string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the value is renderFirst, any drawing done by this node will be done before the node children are rendered. If the value is renderLast, any drawing done by this node will be done after the node children are rendered.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentTransform" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node overall transformation is determined by combining the accumulated transformation matrix of all of its ancestors in the scene graph with the node local 2D transformation matrix described by its translation, rotation, scale and scaleRotateCenter fields. If false, the accumulated transformation of all of its ancestors in the Scene Graph is ignored and only the node local transformation matrix is used. This causes the node to be transformed relative to the root of the Scene Graph (that is, the Scene component).</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="inheritParentOpacity" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If true, the node opacity is determined by multiplying opacity attribute of the node by the opacity of the parent node, which may have been determined by multiplying the opacity of its ancestor nodes. If false, the node opacity is determined by the opacity attribute set for the node or the default opacity attribute value.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="clippingRect" type="array_of_float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a rectangle in the node local coordinate system that is used to limit the region where this node and its children can render. If a non-empty rectangle is specified, then all drawing by this node and its children will be limited to that rectangular area.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="renderPass" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Used in combination with the numRenderPasses field of nodes extended from the  abstract node class, to optimize rendering of lists and grids. This should never be set to a non-zero value unless you are optimizing the performance of a list or grid rendering by specifying the sequence of rendering operations for sub-elements of the list or grid items, and have set the numRenderPasses field value for the list or grid to a value greater than 1. If the numRenderPasses field value for the list or grid is set to a value greater than 1, you must set this field to a value greater than 0 for all sub-elements of the list or grid items, and not greater than the numRenderPasses field value. If the numRenderPasses field is set to a value greater than 1, and you set this field for a list or grid item sub-element to 0 (the default), or a value greater than the numRenderPasses field value, the list or grid item sub-element will not render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="numColumns" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of columns in a grid. This field is not used for lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusRow" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the row that will have fixed focus if the vertFocusAnimationStyle field value is set to fixedFocusWrap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="focusColumn" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the column that will have fixed focus for grids if the horizFocusAnimationStyle field value is set to fixedFocusWrap. This field is not used for lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="horizFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a row of grid items in response to the remote direction pad Left and Right key presses. This field is not used for lists. The possible values are: Option Effect floatingFocus Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible. fixedFocusWrap Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float left or right until it reaches the end of the row, at which point the focus indicator will stay fixed on the first or last item in the row, and the items will scroll left or right if there were items that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the row to wrap around when the focus indicator reaches the first or last item in the row, as long as the row contains enough items to fill the row. If the row does not contain enough items to fill the row, the focus indicator will float left and right.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="floatingFocus" name="vertFocusAnimationStyle">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the how the focus indicator moves in a list or a column of grid items in response to the remote direction pad Up and Down key presses. The possible values are: Option Effect floatingFocus Causes the focus indicator to float up or down until it reaches the end of the list or grid column, at which point the focus indicator will stay fixed on the first or last item in the list or grid column, and the items will scroll up or down if there are items that were not visible. fixedFocusWrap Causes the column to wrap around when the focus indicator reaches the first or last item in the list or grid column, as long as the list or grid column contains enough items to fill the list or grid column. If the list or grid column does not contain enough items to fill the list or grid column, the focus indicator will float up and down. fixedFocus Causes the focus to stay fixed on the upper leftmost item. As the user scrolls down, the row containing the previously selected item scrolls up off screen. Scrolling continues until the last row is reached.</xs:documentation>
                            </xs:annotation>
                            <xs:simpleType>
                                <xs:restriction base="xs:string">
                                    <xs:enumeration value="floatingFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus indicator to float up or down until it reaches the end of the list or grid column, at which point the focus indicator will stay fixed on the first or last item in the list or grid column, and the items will scroll up or down if there are items that were not visible.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocusWrap">
                                        <xs:annotation>
                                            <xs:documentation>Causes the column to wrap around when the focus indicator reaches the first or last item in the list or grid column, as long as the list or grid column contains enough items to fill the list or grid column. If the list or grid column does not contain enough items to fill the list or grid column, the focus indicator will float up and down.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                    <xs:enumeration value="fixedFocus">
                                        <xs:annotation>
                                            <xs:documentation>Causes the focus to stay fixed on the upper leftmost item. As the user scrolls down, the row containing the previously selected item scrolls up off screen. Scrolling continues until the last row is reached.</xs:documentation>
                                        </xs:annotation>
                                    </xs:enumeration>
                                </xs:restriction>
                            </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute default="0" name="wrapDividerWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the vertFocusAnimationStyle field value is set to fixedFocusWrap, specifies the width of a bitmap used as a visual divider between the last and first list or grid items when the list or grid wraps. Only set this field to use a value with a different appearance than the system default.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="fixedLayout" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies that a grid will have a layout of items of different widths configured by parameters included in a ContentNode node for the grid. This field is not used by lists.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="1" name="numRenderPasses" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of rendering operations to display a complex list or grid. This allows you to achieve a performance increase by specifying that individual sub-elements of the list or grid items occur on sequential rendering operations, rather than all of the item sub-elements being rendered in one rendering operation, which is the default. If you set this field to a value greater than 1, you must specify the rendering operation number for each of the item sub-elements as the renderPass field value for that sub-element. No sub-element that has a renderPass field value of 0 (the default), or has a renderPass field value greater than the value of the numRenderPasses field, will render.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="rowHeights" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing heights for each list or grid row, to allow the height of each row to vary from row to row. The specified values override the itemSize field vector2d Y-value for each list or grid row corresponding to its position in the array, in top to bottom order. If the array contains fewer elements than the number of rows needed to display all the items in the list or grid, the itemSize field vector2d Y-value is used for any unspecified rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="columnWidths" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing widths for each grid column, to allow the width of each column to vary from column to column. This field is not used by lists. The specified values override the itemSize field vector2d X-value for each grid column corresponding to its position in the array, in left to right order. If the array contains fewer elements than the number of columns needed to display all the items in the grid, the itemSize field vector2d X-value is used for any unspecified columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="rowSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing spaces between each list or grid row, to allow the spacing between rows to vary from row to row. The specified values override the itemSpacing field vector2d Y-value for each list or grid row corresponding to its position in the array, in top to bottom order. If the array contains fewer elements than the number of rows needed to display all the items in the list or grid, the itemSpacing field vector2d Y-value is used for any unspecified rows.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[]" name="columnSpacings" type="array_of_floats">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies differing spaces between each grid column, to allow the spacing between columns to vary from column to column. This field is not used by lists. The specified values override the itemSpacing field vector2d X-value for each grid column corresponding to its position in the array, in left to right order. If the array contains fewer elements than the number of columns needed to display all the items in the grid, the itemSpacing field vector2d X-value is used for any unspecified columns.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0.0" name="sectionDividerWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;If the ContentNode node specifies sections for a list or grid, specifies the width of the section divider bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[ NaN, NaN, 0.0, 0.0 ]" name="itemClippingRect" type="rect2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies a clipping region for the list or grid items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="itemComponentName" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the name of a XML component for the list items. An instance of this component is created on demand for each visible item of the list. The XML component must define a specific interface as detailed in MarkupList XML Component below.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="none" name="content" type="ContentNode">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the content for the list. The binding between the data model defined by the ContentNode node and its child nodes and the visual elements of the MarkupList node XML component are determined by the scripting in the component. See Data Bindings below for more details.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="itemSize" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the width and height of each item in the list</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="[0,0]" name="itemSpacing" type="vector2d">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;The second value of the vector specifies the vertical spacing between items in the list. The first value of the vector is ignored.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="12" name="numRows" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the number of visible rows displayed. Note that the actual number of rows may be more or less than the number of visible columns depending on the number of items in the grid's content.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="true" name="drawFocusFeedback" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether or not the focus indicator bitmap is displayed</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="false" name="drawFocusFeedbackOnTop" type="xs:boolean">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies whether the focus indicator bitmap is drawn below or on top of the list items</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file used for the focus indicator when the list has focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="focusFootprintBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file used for the focus indicator when the list does not have focus. In most cases, this should be a 9-patch image that specifies both expandable regions as well as margins. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="focusBitmapBlendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Blend the graphic image specified by focusBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus indicator graphic image with a different color than the image specified by focusBitmapUri.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xFFFFFFFF" name="focusFootprintBlendColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Blend the graphic image specified by focusFootprintBitmapUri with the specified color. If set to the default, 0xFFFFFFFF, no color blending will occur. Set this field to show a focus footprint indicator graphic image with a different color than the image specified by focusFootprintBitmapUri.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="wrapDividerBitmapUri" type="uri">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use as a visual separator between the last and first list items when the list wraps. In most case, this should be a 9-patch image that specifies both expandable regions. Only set this field to specify a custom bitmap that differs in appearance from the default bitmap.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="24" name="wrapDividerHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the divider. The wrapDividerBitmap will be scaled to this height. The width of the wrap divider is set to the width of the list items (i.e. itemSize[0]) </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="" name="sectionDividerBitmapUri" type="xs:string">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the bitmap file to use as visual separator between sections of the grid. The section dividers can include an icon and a label in addition to the section divider bitmap. Note that for sections that do not contain an icon or a title, the wrapDividerBitmapUri is used for the section dividers instead.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="system default" name="sectionDividerFont" type="font">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the font for section divider labels</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0xddddddff" name="sectionDividerTextColor" type="color">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the text color for section divider labels</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="10" name="sectionDividerSpacing" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the spacing between the items appearing in the section divider (e.g. the spacing between the section divider icon, the section divider label, and the section divider bitmap). Note the section divider does not always include an icon and/or a title.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="40" name="sectionDividerHeight" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the height of the section dividers. The width of the section dividers is determined by the width of the list items (e.g. itemSize[0]) and the sectionDividerLeftOffset field.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="117" name="sectionDividerMinWidth" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Specifies the minimum width of the section divider bitmap. The section divider label will be ellipsized if necessary in order to ensure that the section divider bitmap meets the minimum width.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="sectionDividerLeftOffset" type="xs:float">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Number of pixels to offset the left edge of the section divider relative to the left edge of the list items.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="jumpToItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid item index, this causes the list to immediately update so that the specified index moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute default="0" name="animateToItem" type="xs:integer">
                            <xs:annotation>
                                <xs:documentation>&lt;b&gt;Description: &lt;/b&gt;&lt;br/&gt;Write-Only When set to a valid item index, this causes the list to quickly scroll so that the specified index moves into the focus position.</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:choice>
        </xs:choice>
    </xs:group>
</xs:schema>
